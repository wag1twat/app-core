"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.UrlSerializer=void 0;const Base_1=require("../Base"),utils_1=require("./utils");class UrlSerializer{_path;_params;_options;constructor(i,t=utils_1.defaultSerializeOptions,s={}){this._path=i,this._params=s,this._options=t,this.extend=this.extend.bind(this),this.setupParam=this.setupParam.bind(this),this.path=this.path.bind(this),this.param=this.param.bind(this),this.build=this.build.bind(this),this.link=this.link.bind(this),this.queries=this.queries.bind(this)}setupParam(i){if((0,Base_1.$Object)(this._params).get(i))throw new utils_1.UniqueParamException(i);this._params={...this._params,[":"+i]:i}}extend(i=void 0,t){return void 0===i&&"build"===t?new UrlSerializer(this._path,this._options,this._params):i&&"queries"===t||i&&"link"===t?new UrlSerializer(i,this._options,this._params):void 0}path(i){return this._path=this._path+"/"+i,this}param(i){return this.setupParam(i),this._path=this._path+"/:"+i,this}link(i){const t=(0,Base_1.$String)(this._path).replaceAll("/",i);return{path:t,extend:()=>this.extend(t,"link")}}queries(i,t){const s=(0,Base_1.$String)(this._path).joinQueryString((0,Base_1.$Object)(i).toQueries({...this._options,...t}));return{path:s,extend:()=>this.extend(s,"queries")}}build(){return{path:this._path,extend:()=>this.extend(void 0,"build"),link:this.link,queries:this.queries}}}exports.UrlSerializer=UrlSerializer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
