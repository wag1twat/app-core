"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.UrlSerializer=void 0;const Base_1=require("../Base"),utils_1=require("./utils");class UrlSerializer{_path;_params;_options;constructor(t,i=utils_1.defaultSerializeOptions,s={}){this._path=t,this._params=s,this._options=i,this.extend=this.extend.bind(this),this.setupParam=this.setupParam.bind(this),this.path=this.path.bind(this),this.param=this.param.bind(this),this.build=this.build.bind(this),this.link=this.link.bind(this),this.queries=this.queries.bind(this)}setupParam(t){if(Base_1.Base.Object(this._params).get(t))throw new utils_1.UniqueParamException(t);this._params={...this._params,[":"+t]:t}}extend(t=void 0,i){return void 0===t&&"build"===i?new UrlSerializer(this._path,this._options,this._params):t&&"queries"===i||t&&"link"===i?new UrlSerializer(t,this._options,this._params):void 0}path(t){return this._path=this._path+"/"+t,this}param(t){return this.setupParam(t),this._path=this._path+"/:"+t,this}link(t){const i=Base_1.Base.String(this._path).replaceAllSeparatedString("/",t);return{path:i,extend:()=>this.extend(i,"link")}}queries(t,i){const s=Base_1.Base.String(this._path).joinQueryString(Base_1.Base.Object(t).toQueries({...this._options,...i}));return{path:s,extend:()=>this.extend(s,"queries")}}build(){return{path:this._path,extend:()=>this.extend(void 0,"build"),link:this.link,queries:this.queries}}}exports.UrlSerializer=UrlSerializer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
