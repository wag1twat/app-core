{"version":3,"sources":["UrlSerializer/UrlSerializer.js","../src/UrlSerializer/UrlSerializer.ts"],"names":["Object","defineProperty","exports","value","Base_1","require","utils_1","UrlSerializer","_path","_params","_options","constructor","path","options","defaultSerializeOptions","params","this","extend","bind","setupParam","param","build","link","queries","key","$Object","get","UniqueParamException","undefined","type","$String","replaceAll","queriesObject","joinQueryString","toQueries"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,cAAeC,KAAAA,ECDtB,MAAAE,OAAAC,QAAA,SAAA,EACAC,QAAAD,QAAA,SAAA,QAQME,cACMC,MACAC,QACAC,SACRC,YACIC,EACAC,EAAyCP,QAAAQ,wBACzCC,EAAiB,IAEjBC,KAAKR,MAAQI,EACbI,KAAKP,QAAUM,EACfC,KAAKN,SAAWG,EAChBG,KAAKC,OAASD,KAAKC,OAAOC,KAAKF,IAAI,EACnCA,KAAKG,WAAaH,KAAKG,WAAWD,KAAKF,IAAI,EAC3CA,KAAKJ,KAAOI,KAAKJ,KAAKM,KAAKF,IAAI,EAC/BA,KAAKI,MAAQJ,KAAKI,MAAMF,KAAKF,IAAI,EACjCA,KAAKK,MAAQL,KAAKK,MAAMH,KAAKF,IAAI,EACjCA,KAAKM,KAAON,KAAKM,KAAKJ,KAAKF,IAAI,EAC/BA,KAAKO,QAAUP,KAAKO,QAAQL,KAAKF,IAAI,CACzC,CAEQG,WAA+BK,GACnC,IAAI,EAAApB,OAAAqB,SAAQT,KAAKP,OAAO,EAAEiB,IAAIF,CAAG,EAC7B,MAAM,IAAIlB,QAAAqB,qBAAqBH,CAAG,EAEtCR,KAAKP,QAAU,CAAE,GAAGO,KAAKP,SAAU,IAAIe,GAAQA,CAAG,CACtD,CAWQP,OACJL,EAA8DgB,KAAAA,EAC9DC,GAEA,OAAaD,KAAAA,IAAThB,GAA+B,UAATiB,EACf,IAAItB,cAA4BS,KAAKR,MAAOQ,KAAKN,SAAUM,KAAKP,OAAO,EAE9EG,GAAiB,YAATiB,GAGRjB,GAAiB,SAATiB,EACD,IAAItB,cACPK,EACAI,KAAKN,SACLM,KAAKP,OAAO,EAJpB,KAAA,CAOJ,CAEOG,KAAuBT,GAE1B,OADAa,KAAKR,MAAWQ,KAAKR,MAAR,IAAiBL,EACvBa,IACX,CAEOI,MAA0BI,GAG7B,OAFAR,KAAKG,WAAWK,CAAG,EACnBR,KAAKR,MAAWQ,KAAKR,MAAR,KAAkBgB,EACxBR,IAIX,CAEQM,KAAuBP,GAC3B,MAAMH,GAAO,EAAAR,OAAA0B,SAAQd,KAAKR,KAAK,EAAEuB,WAAW,IAAKhB,CAAM,EACvD,MAAO,CACHH,KAAAA,EACAK,OAAQA,IAAMD,KAAKC,OAAOL,EAAM,MAAM,CAN9C,CAQA,CAEQW,QACJS,EACAnB,GAEA,MAAMD,GAAO,EAAAR,OAAA0B,SAAQd,KAAKR,KAAK,EAAEyB,iBAC7B,EAAA7B,OAAAqB,SAAQO,CAAa,EAAEE,UAAU,CAC7B,GAAGlB,KAAKN,SACR,GAAGG,CAVV,CAWI,CAAC,EAEN,MAAO,CACHD,KAAAA,EACAK,OAAQA,IAAMD,KAAKC,OAAOL,EAAM,SAAS,CANrC,CAQZ,CAEOS,QACH,MAAO,CACHT,KAAMI,KAAKR,MACXS,OAAQA,IAAMD,KAAKC,OAAOW,KAAAA,EAAW,OAAO,EAC5CN,KAAMN,KAAKM,KACXC,QAASP,KAAKO,OALV,CAOZ,CDtCJ,CCyCSrB,QAAAK,cAAAA","file":"UrlSerializer.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlSerializer = void 0;\nconst Base_1 = require(\"../Base\");\nconst utils_1 = require(\"./utils\");\nclass UrlSerializer {\n    _path;\n    _params;\n    _options;\n    constructor(path, options = utils_1.defaultSerializeOptions, params = {}) {\n        this._path = path;\n        this._params = params;\n        this._options = options;\n        this.extend = this.extend.bind(this);\n        this.setupParam = this.setupParam.bind(this);\n        this.path = this.path.bind(this);\n        this.param = this.param.bind(this);\n        this.build = this.build.bind(this);\n        this.link = this.link.bind(this);\n        this.queries = this.queries.bind(this);\n    }\n    setupParam(key) {\n        if ((0, Base_1.$Object)(this._params).get(key)) {\n            throw new utils_1.UniqueParamException(key);\n        }\n        this._params = { ...this._params, [`:${key}`]: key };\n    }\n    extend(path = undefined, type) {\n        if (path === undefined && type === 'build') {\n            return new UrlSerializer(this._path, this._options, this._params);\n        }\n        if (path && type === 'queries') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n        if (path && type === 'link') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n    }\n    path(value) {\n        this._path = `${this._path}/${value}`;\n        return this;\n    }\n    param(key) {\n        this.setupParam(key);\n        this._path = `${this._path}/:${key}`;\n        return this;\n    }\n    link(params) {\n        const path = (0, Base_1.$String)(this._path).replaceAll('/', params);\n        return {\n            path,\n            extend: () => this.extend(path, 'link'),\n        };\n    }\n    queries(queriesObject, options) {\n        const path = (0, Base_1.$String)(this._path).joinQueryString((0, Base_1.$Object)(queriesObject).toQueries({\n            ...this._options,\n            ...options,\n        }));\n        return {\n            path,\n            extend: () => this.extend(path, 'queries'),\n        };\n    }\n    build() {\n        return {\n            path: this._path,\n            extend: () => this.extend(undefined, 'build'),\n            link: this.link,\n            queries: this.queries,\n        };\n    }\n}\nexports.UrlSerializer = UrlSerializer;\n","import { $Object, $String, ReplaceAll } from '../Base'\nimport {\n    defaultSerializeOptions,\n    UrlSerializerOptions,\n    UrlSerializerParams,\n    UrlSerializerQueries,\n    UniqueParamException,\n} from './utils'\n\nclass UrlSerializer<Path extends string, Params extends UrlSerializerParams<string>> {\n    private _path: Path\n    private _params: Params\n    private _options: Partial<UrlSerializerOptions>\n    constructor(\n        path: Path,\n        options: Partial<UrlSerializerOptions> = defaultSerializeOptions,\n        params: Params = {} as Params\n    ) {\n        this._path = path\n        this._params = params\n        this._options = options\n        this.extend = this.extend.bind(this)\n        this.setupParam = this.setupParam.bind(this)\n        this.path = this.path.bind(this)\n        this.param = this.param.bind(this)\n        this.build = this.build.bind(this)\n        this.link = this.link.bind(this)\n        this.queries = this.queries.bind(this)\n    }\n\n    private setupParam<Key extends string>(key: Key) {\n        if ($Object(this._params).get(key)) {\n            throw new UniqueParamException(key)\n        }\n        this._params = { ...this._params, [`:${key}`]: key }\n    }\n\n    private extend(path: undefined, type: 'build'): UrlSerializer<Path, Params>\n    private extend<P extends `${string}${string}`>(\n        path: P,\n        type: 'queries'\n    ): UrlSerializer<P, Params>\n    private extend<P extends Params>(\n        path: ReplaceAll<Path, P>,\n        type: 'link'\n    ): UrlSerializer<ReplaceAll<Path, P>, Omit<Params, keyof P>>\n    private extend<P extends Params>(\n        path: ReplaceAll<Path, P> | `${Path}?${string}` | undefined = undefined,\n        type: 'build' | 'queries' | 'link'\n    ) {\n        if (path === undefined && type === 'build') {\n            return new UrlSerializer<Path, Params>(this._path, this._options, this._params)\n        }\n        if (path && type === 'queries') {\n            return new UrlSerializer<`${Path}?${string}`, Params>(path, this._options, this._params)\n        }\n        if (path && type === 'link') {\n            return new UrlSerializer<ReplaceAll<Path, P>, Omit<Params, keyof P>>(\n                path as ReplaceAll<Path, P>,\n                this._options,\n                this._params\n            )\n        }\n    }\n\n    public path<T extends string>(value: T) {\n        this._path = `${this._path}/${value}` as Path\n        return this as unknown as UrlSerializer<`${Path}/${T}`, Params>\n    }\n\n    public param<Key extends string>(key: Key) {\n        this.setupParam(key)\n        this._path = `${this._path}/:${key}` as Path\n        return this as unknown as UrlSerializer<\n            `${Path}/:${Key}`,\n            Params & UrlSerializerParams<Key>\n        >\n    }\n\n    private link<P extends Params>(params: P) {\n        const path = $String(this._path).replaceAll('/', params)\n        return {\n            path,\n            extend: () => this.extend(path, 'link'),\n        }\n    }\n\n    private queries<Queries extends UrlSerializerQueries>(\n        queriesObject: Queries,\n        options?: Partial<UrlSerializerOptions>\n    ) {\n        const path = $String(this._path).joinQueryString(\n            $Object(queriesObject).toQueries({\n                ...this._options,\n                ...options,\n            })\n        )\n        return {\n            path,\n            extend: () => this.extend(path, 'queries'),\n        }\n    }\n\n    public build() {\n        return {\n            path: this._path,\n            extend: () => this.extend(undefined, 'build'),\n            link: this.link,\n            queries: this.queries,\n        }\n    }\n}\n\nexport { UrlSerializer }\n"]}