{"version":3,"sources":["UrlSerializer/UrlSerializer.js","../lib/UrlSerializer/UrlSerializer.ts"],"names":["Object","defineProperty","exports","value","Base_1","require","utils_1","UrlSerializer","_path","_params","_options","constructor","path","options","defaultSerializeOptions","params","this","extend","bind","setupParam","param","build","link","queries","key","Base","get","UniqueParamException","undefined","type","String","replaceAllSeparatedString","queriesObject","joinQueryString","toQueries"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,cAAeC,KAAAA,ECDtB,MAAAE,OAAAC,QAAA,SAAA,EACAC,QAAAD,QAAA,SAAA,QAEME,cACMC,MACAC,QACAC,SACRC,YAAYC,EAAYC,EAAyCP,QAAAQ,wBAAyBC,EAAiB,IACvGC,KAAKR,MAAQI,EACbI,KAAKP,QAAUM,EACfC,KAAKN,SAAWG,EAChBG,KAAKC,OAASD,KAAKC,OAAOC,KAAKF,IAAI,EACnCA,KAAKG,WAAaH,KAAKG,WAAWD,KAAKF,IAAI,EAC3CA,KAAKJ,KAAOI,KAAKJ,KAAKM,KAAKF,IAAI,EAC/BA,KAAKI,MAAQJ,KAAKI,MAAMF,KAAKF,IAAI,EACjCA,KAAKK,MAAQL,KAAKK,MAAMH,KAAKF,IAAI,EACjCA,KAAKM,KAAON,KAAKM,KAAKJ,KAAKF,IAAI,EAC/BA,KAAKO,QAAUP,KAAKO,QAAQL,KAAKF,IAAI,CACzC,CAEQG,WAA+BK,GACnC,GAAGpB,OAAAqB,KAAKzB,OAAOgB,KAAKP,OAAO,EAAEiB,IAAIF,CAAG,EAChC,MAAM,IAAIlB,QAAAqB,qBAAqBH,CAAG,EAEtCR,KAAKP,QAAU,CAAE,GAAGO,KAAKP,SAAU,IAAIe,GAAQA,CAAG,CACtD,CAKQP,OAAyBL,EAA2EgB,KAAAA,EAAWC,GACnH,OAAYD,KAAAA,IAAThB,GAA+B,UAATiB,EACd,IAAItB,cAA4BS,KAAKR,MAAOQ,KAAKN,SAAUM,KAAKP,OAAO,EAE/EG,GAAiB,YAATiB,GAGRjB,GAAiB,SAATiB,EACA,IAAItB,cAAuEK,EAA0CI,KAAKN,SAAUM,KAAKP,OAAO,EAD3J,KAAA,CAGJ,CAEOG,KAAuBT,GAE1B,OADAa,KAAKR,MAAWQ,KAAKR,MAAR,IAAiBL,EACvBa,IACX,CAEOI,MAA0BI,GAG7B,OAFAR,KAAKG,WAAWK,CAAG,EACnBR,KAAKR,MAAWQ,KAAKR,MAAR,KAAkBgB,EACxBR,IACX,CAEQM,KAAuBP,GAC3B,MAAMH,EAAOR,OAAAqB,KAAKK,OAAOd,KAAKR,KAAK,EAAEuB,0BAA0B,IAAKhB,CAAM,EAC1E,MAAO,CACHH,KAAAA,EACAK,OAAQA,IAAMD,KAAKC,OAAOL,EAAM,MAAM,CAN9C,CAQA,CAEQW,QAA8CS,EAAwBnB,GAC1E,MAAMD,EAAOR,OAAAqB,KAAKK,OAAOd,KAAKR,KAAK,EAAEyB,gBAAgB7B,OAAAqB,KAAKzB,OAAOgC,CAAa,EAAEE,UAAU,CAAE,GAAGlB,KAAKN,SAAU,GAAGG,CAAO,CAAE,CAAC,EAC3H,MAAO,CACHD,KAAAA,EACAK,OAAQA,IAAMD,KAAKC,OAAOL,EAAM,SAAS,CANjD,CAQA,CAEOS,QACH,MAAO,CACHT,KAAMI,KAAKR,MACXS,OAAQA,IAAMD,KAAKC,OAAOW,KAAAA,EAAW,OAAO,EAC5CN,KAAMN,KAAKM,KACXC,QAASP,KAAKO,OATdN,CAWR,CDPJ,CCUSf,QAAAK,cAAAA","file":"UrlSerializer.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlSerializer = void 0;\nconst Base_1 = require(\"../Base\");\nconst utils_1 = require(\"./utils\");\nclass UrlSerializer {\n    _path;\n    _params;\n    _options;\n    constructor(path, options = utils_1.defaultSerializeOptions, params = {}) {\n        this._path = path;\n        this._params = params;\n        this._options = options;\n        this.extend = this.extend.bind(this);\n        this.setupParam = this.setupParam.bind(this);\n        this.path = this.path.bind(this);\n        this.param = this.param.bind(this);\n        this.build = this.build.bind(this);\n        this.link = this.link.bind(this);\n        this.queries = this.queries.bind(this);\n    }\n    setupParam(key) {\n        if (Base_1.Base.Object(this._params).get(key)) {\n            throw new utils_1.UniqueParamException(key);\n        }\n        this._params = { ...this._params, [`:${key}`]: key };\n    }\n    extend(path = undefined, type) {\n        if (path === undefined && type === 'build') {\n            return new UrlSerializer(this._path, this._options, this._params);\n        }\n        if (path && type === 'queries') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n        if (path && type === 'link') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n    }\n    path(value) {\n        this._path = `${this._path}/${value}`;\n        return this;\n    }\n    param(key) {\n        this.setupParam(key);\n        this._path = `${this._path}/:${key}`;\n        return this;\n    }\n    link(params) {\n        const path = Base_1.Base.String(this._path).replaceAllSeparatedString('/', params);\n        return {\n            path,\n            extend: () => this.extend(path, 'link')\n        };\n    }\n    queries(queriesObject, options) {\n        const path = Base_1.Base.String(this._path).joinQueryString(Base_1.Base.Object(queriesObject).toQueries({ ...this._options, ...options }));\n        return {\n            path,\n            extend: () => this.extend(path, 'queries')\n        };\n    }\n    build() {\n        return {\n            path: this._path,\n            extend: () => this.extend(undefined, 'build'),\n            link: this.link,\n            queries: this.queries\n        };\n    }\n}\nexports.UrlSerializer = UrlSerializer;\n","import { Base, Types } from \"../Base\"\r\nimport { defaultSerializeOptions, UrlSerializerOptions, UrlSerializerParams, UrlSerializerQueries, UniqueParamException } from './utils'\r\n\r\nclass UrlSerializer<Path extends string, Params extends UrlSerializerParams<string>> {\r\n    private _path: Path\r\n    private _params: Params\r\n    private _options: Partial<UrlSerializerOptions>\r\n    constructor(path: Path, options: Partial<UrlSerializerOptions> = defaultSerializeOptions, params: Params = {} as Params) {\r\n        this._path = path\r\n        this._params = params\r\n        this._options = options\r\n        this.extend = this.extend.bind(this)\r\n        this.setupParam = this.setupParam.bind(this)\r\n        this.path = this.path.bind(this)\r\n        this.param = this.param.bind(this)\r\n        this.build = this.build.bind(this)\r\n        this.link = this.link.bind(this)\r\n        this.queries = this.queries.bind(this)\r\n    }\r\n\r\n    private setupParam<Key extends string>(key: Key) {\r\n        if(Base.Object(this._params).get(key)) {\r\n            throw new UniqueParamException(key)\r\n        }\r\n        this._params = { ...this._params, [`:${key}`]: key }\r\n    }\r\n\r\n    private extend(path: undefined, type: 'build'): UrlSerializer<Path, Params>\r\n    private extend<P extends `${string}${string}`>(path: P, type: 'queries'): UrlSerializer<P, Params>\r\n    private extend<P extends Params>(path: Types.String.ReplaceAll<Path, P>, type: 'link'): UrlSerializer<Types.String.ReplaceAll<Path, P>, Omit<Params, keyof P>>\r\n    private extend<P extends Params>(path: Types.String.ReplaceAll<Path, P> | `${Path}?${string}` | undefined = undefined, type: 'build' | 'queries' | 'link') {\r\n        if(path === undefined && type === 'build') {\r\n            return new UrlSerializer<Path, Params>(this._path, this._options, this._params)\r\n        }\r\n        if(path && type === 'queries') {\r\n            return new UrlSerializer<`${Path}?${string}`, Params>(path, this._options, this._params)\r\n        }\r\n        if(path && type === 'link') {\r\n            return new UrlSerializer<Types.String.ReplaceAll<Path, P>, Omit<Params, keyof P>>(path as Types.String.ReplaceAll<Path, P>, this._options, this._params)\r\n        }\r\n    }\r\n\r\n    public path<T extends string>(value: T) {\r\n        this._path = `${this._path}/${value}` as Path\r\n        return this as unknown as UrlSerializer<`${Path}/${T}`, Params>\r\n    }\r\n\r\n    public param<Key extends string>(key: Key) {\r\n        this.setupParam(key)\r\n        this._path = `${this._path}/:${key}` as Path\r\n        return this as unknown as UrlSerializer<`${Path}/:${Key}`, Params & UrlSerializerParams<Key>>\r\n    }\r\n\r\n    private link<P extends Params>(params: P) {\r\n        const path = Base.String(this._path).replaceAllSeparatedString('/', params)\r\n        return {\r\n            path,\r\n            extend: () => this.extend(path, 'link')\r\n        }\r\n    }\r\n\r\n    private queries<Queries extends UrlSerializerQueries>(queriesObject: Queries, options?: Partial<UrlSerializerOptions>) {\r\n        const path = Base.String(this._path).joinQueryString(Base.Object(queriesObject).toQueries({ ...this._options, ...options }))\r\n        return {\r\n            path,\r\n            extend: () => this.extend(path, 'queries')\r\n        }\r\n    }\r\n\r\n    public build() {\r\n        return {\r\n            path: this._path,\r\n            extend: () => this.extend(undefined, 'build'),\r\n            link: this.link,\r\n            queries: this.queries\r\n        }\r\n    }\r\n}\r\n\r\nexport { UrlSerializer }"]}