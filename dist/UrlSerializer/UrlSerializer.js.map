{"version":3,"sources":["../lib/UrlSerializer/UrlSerializer.ts","UrlSerializer/UrlSerializer.js"],"names":["_Base","require","_utils","UrlSerializer","constructor","path","options","defaultSerializeOptions","params","this","_path","_params","_options","extend","bind","setupParam","param","build","link","queries","key","Base","Object","get","UniqueParamException","assign","undefined","type","value","String","replaceAllSeparatedString","queriesObject","joinQueryString","toQueries","exports"],"mappings":"iGAAA,IAAAA,MAAAC,QAAA,SAAA,EACAC,OAAAD,QAAA,SAAA,QAEME,cAIFC,YAAYC,EAAYC,EAAyCC,OAAAA,wBAAyBC,EAAiB,IACvGC,KAAKC,MAAQL,EACbI,KAAKE,QAAUH,EACfC,KAAKG,SAAWN,EAChBG,KAAKI,OAASJ,KAAKI,OAAOC,KAAKL,IAAI,EACnCA,KAAKM,WAAaN,KAAKM,WAAWD,KAAKL,IAAI,EAC3CA,KAAKJ,KAAOI,KAAKJ,KAAKS,KAAKL,IAAI,EAC/BA,KAAKO,MAAQP,KAAKO,MAAMF,KAAKL,IAAI,EACjCA,KAAKQ,MAAQR,KAAKQ,MAAMH,KAAKL,IAAI,EACjCA,KAAKS,KAAOT,KAAKS,KAAKJ,KAAKL,IAAI,EAC/BA,KAAKU,QAAUV,KAAKU,QAAQL,KAAKL,IAAI,CACzC,CAEQM,WAA+BK,GACnC,GAAGC,MAAAA,KAAKC,OAAOb,KAAKE,OAAO,EAAEY,IAAIH,CAAG,EAChC,MAAM,IAAII,OAAAA,qBAAqBJ,CAAG,EAEtCX,KAAKE,QAAOW,OAAAG,OAAAH,OAAAG,OAAA,GAAQhB,KAAKE,OAAO,EAAA,EAAG,IAAIS,GAAQA,CAAG,CAAA,CACtD,CAKQP,OAAyBR,EAA2EqB,KAAAA,EAAWC,GACnH,OAAYD,KAAAA,IAATrB,GAA+B,UAATsB,EACd,IAAIxB,cAA4BM,KAAKC,MAAOD,KAAKG,SAAUH,KAAKE,OAAO,EAE/EN,GAAiB,YAATsB,GAGRtB,GAAiB,SAATsB,EACA,IAAIxB,cAAuEE,EAA0CI,KAAKG,SAAUH,KAAKE,OAAO,EAD3J,KAAA,CAGJ,CAEON,KAAuBuB,GAE1B,OADAnB,KAAKC,MAAWD,KAAKC,MAAR,IAAiBkB,EACvBnB,IACX,CAEOO,MAA0BI,GAG7B,OAFAX,KAAKM,WAAWK,CAAG,EACnBX,KAAKC,MAAWD,KAAKC,MAAR,KAAkBU,EACxBX,IACX,CAEQS,KAAuBV,GAC3B,MAAMH,EAAOgB,MAAAA,KAAKQ,OAAOpB,KAAKC,KAAK,EAAEoB,0BAA0B,IAAKtB,CAAM,EAC1E,MAAO,CACHH,KAAAA,EACAQ,OAAQA,IAAMJ,KAAKI,OAAOR,EAAM,MAAM,CARtC,CAUR,CAEQc,QAA8CY,EAAwBzB,GAC1E,MAAMD,EAAOgB,MAAAA,KAAKQ,OAAOpB,KAAKC,KAAK,EAAEsB,gBAAgBX,MAAAA,KAAKC,OAAOS,CAAa,EAAEE,UAASX,OAAAG,OAAAH,OAAAG,OAAA,GAAMhB,KAAKG,QAAQ,EAAKN,CAAO,CAAA,CAAG,EAC3H,MAAO,CACHD,KAAAA,EACAQ,OAAQA,IAAMJ,KAAKI,OAAOR,EAAM,SAAS,CARzCQ,CAUR,CAEOI,QACH,MAAO,CACHZ,KAAMI,KAAKC,MACXG,OAAQA,IAAMJ,KAAKI,OAAOa,KAAAA,EAAW,OAAO,EAC5CR,KAAMT,KAAKS,KACXC,QAASV,KAAKU,OARjB,CAUL,CCbJ,CDcCe,QAAA/B,cAAAA","file":"UrlSerializer.js","sourcesContent":["import { Base, Types } from \"../Base\"\r\nimport { defaultSerializeOptions, UrlSerializerOptions, UrlSerializerParams, UrlSerializerQueries, UniqueParamException } from './utils'\r\n\r\nclass UrlSerializer<Path extends string, Params extends UrlSerializerParams<string>> {\r\n    private _path: Path\r\n    private _params: Params\r\n    private _options: Partial<UrlSerializerOptions>\r\n    constructor(path: Path, options: Partial<UrlSerializerOptions> = defaultSerializeOptions, params: Params = {} as Params) {\r\n        this._path = path\r\n        this._params = params\r\n        this._options = options\r\n        this.extend = this.extend.bind(this)\r\n        this.setupParam = this.setupParam.bind(this)\r\n        this.path = this.path.bind(this)\r\n        this.param = this.param.bind(this)\r\n        this.build = this.build.bind(this)\r\n        this.link = this.link.bind(this)\r\n        this.queries = this.queries.bind(this)\r\n    }\r\n\r\n    private setupParam<Key extends string>(key: Key) {\r\n        if(Base.Object(this._params).get(key)) {\r\n            throw new UniqueParamException(key)\r\n        }\r\n        this._params = { ...this._params, [`:${key}`]: key }\r\n    }\r\n\r\n    private extend(path: undefined, type: 'build'): UrlSerializer<Path, Params>\r\n    private extend<P extends `${string}${string}`>(path: P, type: 'queries'): UrlSerializer<P, Params>\r\n    private extend<P extends Params>(path: Types.String.ReplaceAll<Path, P>, type: 'link'): UrlSerializer<Types.String.ReplaceAll<Path, P>, Omit<Params, keyof P>>\r\n    private extend<P extends Params>(path: Types.String.ReplaceAll<Path, P> | `${Path}?${string}` | undefined = undefined, type: 'build' | 'queries' | 'link') {\r\n        if(path === undefined && type === 'build') {\r\n            return new UrlSerializer<Path, Params>(this._path, this._options, this._params)\r\n        }\r\n        if(path && type === 'queries') {\r\n            return new UrlSerializer<`${Path}?${string}`, Params>(path, this._options, this._params)\r\n        }\r\n        if(path && type === 'link') {\r\n            return new UrlSerializer<Types.String.ReplaceAll<Path, P>, Omit<Params, keyof P>>(path as Types.String.ReplaceAll<Path, P>, this._options, this._params)\r\n        }\r\n    }\r\n\r\n    public path<T extends string>(value: T) {\r\n        this._path = `${this._path}/${value}` as Path\r\n        return this as unknown as UrlSerializer<`${Path}/${T}`, Params>\r\n    }\r\n\r\n    public param<Key extends string>(key: Key) {\r\n        this.setupParam(key)\r\n        this._path = `${this._path}/:${key}` as Path\r\n        return this as unknown as UrlSerializer<`${Path}/:${Key}`, Params & UrlSerializerParams<Key>>\r\n    }\r\n\r\n    private link<P extends Params>(params: P) {\r\n        const path = Base.String(this._path).replaceAllSeparatedString('/', params)\r\n        return {\r\n            path,\r\n            extend: () => this.extend(path, 'link')\r\n        }\r\n    }\r\n\r\n    private queries<Queries extends UrlSerializerQueries>(queriesObject: Queries, options?: Partial<UrlSerializerOptions>) {\r\n        const path = Base.String(this._path).joinQueryString(Base.Object(queriesObject).toQueries({ ...this._options, ...options }))\r\n        return {\r\n            path,\r\n            extend: () => this.extend(path, 'queries')\r\n        }\r\n    }\r\n\r\n    public build() {\r\n        return {\r\n            path: this._path,\r\n            extend: () => this.extend(undefined, 'build'),\r\n            link: this.link,\r\n            queries: this.queries\r\n        }\r\n    }\r\n}\r\n\r\nexport { UrlSerializer }","import { Base } from \"../Base\";\nimport { defaultSerializeOptions, UniqueParamException } from './utils';\nclass UrlSerializer {\n    constructor(path, options = defaultSerializeOptions, params = {}) {\n        this._path = path;\n        this._params = params;\n        this._options = options;\n        this.extend = this.extend.bind(this);\n        this.setupParam = this.setupParam.bind(this);\n        this.path = this.path.bind(this);\n        this.param = this.param.bind(this);\n        this.build = this.build.bind(this);\n        this.link = this.link.bind(this);\n        this.queries = this.queries.bind(this);\n    }\n    setupParam(key) {\n        if (Base.Object(this._params).get(key)) {\n            throw new UniqueParamException(key);\n        }\n        this._params = Object.assign(Object.assign({}, this._params), { [`:${key}`]: key });\n    }\n    extend(path = undefined, type) {\n        if (path === undefined && type === 'build') {\n            return new UrlSerializer(this._path, this._options, this._params);\n        }\n        if (path && type === 'queries') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n        if (path && type === 'link') {\n            return new UrlSerializer(path, this._options, this._params);\n        }\n    }\n    path(value) {\n        this._path = `${this._path}/${value}`;\n        return this;\n    }\n    param(key) {\n        this.setupParam(key);\n        this._path = `${this._path}/:${key}`;\n        return this;\n    }\n    link(params) {\n        const path = Base.String(this._path).replaceAllSeparatedString('/', params);\n        return {\n            path,\n            extend: () => this.extend(path, 'link')\n        };\n    }\n    queries(queriesObject, options) {\n        const path = Base.String(this._path).joinQueryString(Base.Object(queriesObject).toQueries(Object.assign(Object.assign({}, this._options), options)));\n        return {\n            path,\n            extend: () => this.extend(path, 'queries')\n        };\n    }\n    build() {\n        return {\n            path: this._path,\n            extend: () => this.extend(undefined, 'build'),\n            link: this.link,\n            queries: this.queries\n        };\n    }\n}\nexport { UrlSerializer };\n"]}