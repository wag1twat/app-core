"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Types_1=require("../Types"),Guards_1=require("../../Guards"),Object_1=require("../Object"),createSort=c=>r=>{let d=!1;const{field:e,order:s,orders:a,onUpdate:t}=r,u={_collection:[],_order:Types_1.Types.Array.Sort.defaultOrder,_orders:Types_1.Types.Array.Sort.defaultOrders,_field:void 0},i=()=>{Guards_1.Guards.isFunc(t)&&t(u)};r=()=>{u._field=e||void 0,u._order=s||Types_1.Types.Array.Sort.defaultOrder,u._orders=a||Types_1.Types.Array.Sort.defaultOrders,u._collection=[...c],i()};const o=r=>{Guards_1.Guards.isUndefined(r)||(u._field=r)},l=(r,e)=>{let s=!1;e?Guards_1.Guards.isString(u._field)&&Guards_1.Guards.isString(r)?u._field===r&&(s=d):Guards_1.Guards.isString(u._field)&&Guards_1.Guards.isObject(r)?u._field===r.xpath&&(s=d):Guards_1.Guards.isObject(u._field)&&Guards_1.Guards.isString(r)?u._field.xpath===r&&(s=d):Guards_1.Guards.isObject(u._field)&&Guards_1.Guards.isObject(r)&&u._field.xpath===r.xpath&&(s=d):s=d,s&&(e=u._orders.length-1,r=u._orders.indexOf(u._order)+1,u._order=r<=e?u._orders[r]:u._orders[0])},G=()=>"default"===u._order&&(u._collection=[...c],i(),!0);var _=(r={})=>{var{field:r,noUpdateOrderFalsyEqualXPath:e=!1}=r;if(l(r,e),o(r),!G()){const a="ASC"===u._order,t=Guards_1.Guards.isString(u._field),_=Guards_1.Guards.isObject(u._field);u._collection=[...u._collection].sort((r,e)=>{let s=0;t?(r=r[u._field],e=e[u._field]):_&&(r=u._field.handler((0,Object_1.$Object)(r).getXPath(u._field.xpath)),e=u._field.handler((0,Object_1.$Object)(e).getXPath(u._field.xpath)));var d=Types_1.Types.Array.Sort.compareStrings(a,Guards_1.Guards.isString(r),Guards_1.Guards.isString(e),r,e),d=(Guards_1.Guards.isNumber(d)&&(s=d),Types_1.Types.Array.Sort.compareNumbers(a,Guards_1.Guards.isNumber(r),Guards_1.Guards.isNumber(e),r,e)),d=(Guards_1.Guards.isNumber(d)&&(s=d),Types_1.Types.Array.Sort.compareBooleans(a,Guards_1.Guards.isBoolean(r),Guards_1.Guards.isBoolean(e),r,e));return s=Guards_1.Guards.isNumber(d)?d:s}),i()}};return r(),d||(_({field:e}),d=!0),{cleanup:r,update:_}};exports.default=createSort;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
