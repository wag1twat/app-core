{"version":3,"sources":["Base/Array/create-sort/create-sort.js","../src/Base/Array/create-sort/create-sort.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","createSort","Types_1","require","Guards_1","get_xpath_1","get_compare_function_1","collection","options","let","called","field","order","orders","onUpdate","state","_collection","slice","_order","Types","Array","Sort","defaultOrder","_orders","defaultOrders","_field","undefined","onUpdateCallback","Guards","isFunc","getValue","item","isString","default","isObject","handler","xpath","setField","isUndefined","setOrder","noUpdateOrderFalsyEqualXPath","is","lastOrderIndex","length","nextOrderIndex","indexOf","update","sort","l","r","cleanup"],"mappings":"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","file":"create-sort.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSort = void 0;\nconst Types_1 = require(\"../../Types\");\nconst Guards_1 = require(\"../../../Guards\");\nconst get_xpath_1 = __importDefault(require(\"../../Object/get-xpath\"));\nconst get_compare_function_1 = __importDefault(require(\"./get-compare-function\"));\nconst createSort = (collection) => {\n    return (options) => {\n        let called = false;\n        const { field, order, orders, onUpdate } = options;\n        const state = {\n            _collection: collection.slice(),\n            _order: order ? order : Types_1.Types.Array.Sort.defaultOrder,\n            _orders: orders ? orders : Types_1.Types.Array.Sort.defaultOrders,\n            _field: field ? field : undefined,\n        };\n        //callbacks\n        const onUpdateCallback = () => {\n            if (Guards_1.Guards.isFunc(onUpdate)) {\n                onUpdate(state);\n            }\n        };\n        // utilities\n        const getValue = (item) => {\n            if (Guards_1.Guards.isString(state._field)) {\n                return (0, get_xpath_1.default)(item)(state._field);\n            }\n            if (Guards_1.Guards.isObject(state._field)) {\n                return state._field.handler((0, get_xpath_1.default)(item)(state._field.xpath));\n            }\n            return item;\n        };\n        const cleanup = () => {\n            state._field = field ? field : undefined;\n            state._order = order ? order : Types_1.Types.Array.Sort.defaultOrder;\n            state._orders = orders ? orders : Types_1.Types.Array.Sort.defaultOrders;\n            state._collection = collection.slice();\n            onUpdateCallback();\n        };\n        const setField = (field) => {\n            if (!Guards_1.Guards.isUndefined(field)) {\n                state._field = field;\n            }\n        };\n        const setOrder = (field, noUpdateOrderFalsyEqualXPath) => {\n            let is = false;\n            if (noUpdateOrderFalsyEqualXPath) {\n                if (Guards_1.Guards.isString(state._field) && Guards_1.Guards.isString(field)) {\n                    if (state._field === field) {\n                        is = true && called;\n                    }\n                }\n                else if (Guards_1.Guards.isString(state._field) && Guards_1.Guards.isObject(field)) {\n                    if (state._field === field.xpath) {\n                        is = true && called;\n                    }\n                }\n                else if (Guards_1.Guards.isObject(state._field) && Guards_1.Guards.isString(field)) {\n                    if (state._field.xpath === field) {\n                        is = true && called;\n                    }\n                }\n                else if (Guards_1.Guards.isObject(state._field) && Guards_1.Guards.isObject(field)) {\n                    if (state._field.xpath === field.xpath) {\n                        is = true && called;\n                    }\n                }\n            }\n            else {\n                is = true && called;\n            }\n            if (is) {\n                const lastOrderIndex = state._orders.length - 1;\n                const currentOrderIndex = state._orders.indexOf(state._order);\n                const nextOrderIndex = currentOrderIndex + 1;\n                state._order =\n                    nextOrderIndex <= lastOrderIndex\n                        ? state._orders[nextOrderIndex]\n                        : state._orders[0];\n            }\n        };\n        const update = (options = {}) => {\n            const { field, noUpdateOrderFalsyEqualXPath = false } = options;\n            setOrder(field, noUpdateOrderFalsyEqualXPath);\n            setField(field);\n            if (state._order === 'default') {\n                state._collection = collection.slice();\n                onUpdateCallback();\n            }\n            else {\n                state._collection = state._collection.slice().sort((l, r) => (0, get_compare_function_1.default)(state._order, getValue(l), getValue(r)));\n                onUpdateCallback();\n            }\n        };\n        if (!called) {\n            update({\n                field,\n            });\n            called = true;\n        }\n        return {\n            cleanup,\n            update,\n        };\n    };\n};\nexports.createSort = createSort;\n","import { Types } from '../../Types'\nimport { Guards } from '../../../Guards'\nimport getXPath from '../../Object/get-xpath'\nimport getCompareFunction from './get-compare-function'\n\nconst createSort = <T extends any[]>(collection: T) => {\n    return <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n        options: Types.Array.Sort.Options<T, XPath>\n    ) => {\n        let called: boolean = false\n\n        const { field, order, orders, onUpdate } = options\n\n        const state: Types.Array.Sort.State<T> = {\n            _collection: collection.slice() as T,\n            _order: order ? order : Types.Array.Sort.defaultOrder,\n            _orders: orders ? orders : Types.Array.Sort.defaultOrders,\n            _field: field ? field : undefined,\n        }\n\n        //callbacks\n        const onUpdateCallback = () => {\n            if (Guards.isFunc(onUpdate)) {\n                onUpdate(state)\n            }\n        }\n        // utilities\n        const getValue = (item: Types.Array.Of<T>) => {\n            if (Guards.isString(state._field)) {\n                return getXPath(item)(state._field)\n            }\n            if (Guards.isObject(state._field)) {\n                return state._field.handler(getXPath(item)(state._field.xpath))\n            }\n            return item\n        }\n\n        const cleanup = () => {\n            state._field = field ? field : undefined\n            state._order = order ? order : Types.Array.Sort.defaultOrder\n            state._orders = orders ? orders : Types.Array.Sort.defaultOrders\n            state._collection = collection.slice() as T\n            onUpdateCallback()\n        }\n\n        const setField = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            field: Types.Array.Sort.Field<T, XPath> | undefined\n        ) => {\n            if (!Guards.isUndefined(field)) {\n                state._field = field\n            }\n        }\n\n        const setOrder = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            field: Types.Array.Sort.Field<T, XPath> | undefined,\n            noUpdateOrderFalsyEqualXPath: boolean\n        ) => {\n            let is: boolean = false\n\n            if (noUpdateOrderFalsyEqualXPath) {\n                if (Guards.isString(state._field) && Guards.isString(field)) {\n                    if (state._field === field) {\n                        is = true && called\n                    }\n                } else if (Guards.isString(state._field) && Guards.isObject(field)) {\n                    if (state._field === field.xpath) {\n                        is = true && called\n                    }\n                } else if (Guards.isObject(state._field) && Guards.isString(field)) {\n                    if (state._field.xpath === field) {\n                        is = true && called\n                    }\n                } else if (Guards.isObject(state._field) && Guards.isObject(field)) {\n                    if (state._field.xpath === field.xpath) {\n                        is = true && called\n                    }\n                }\n            } else {\n                is = true && called\n            }\n\n            if (is) {\n                const lastOrderIndex = state._orders.length - 1\n                const currentOrderIndex = state._orders.indexOf(state._order)\n                const nextOrderIndex = currentOrderIndex + 1\n                state._order =\n                    nextOrderIndex <= lastOrderIndex\n                        ? state._orders[nextOrderIndex]\n                        : state._orders[0]\n            }\n        }\n\n        const update = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            options: Types.Array.Sort.UpdateOptions<T, XPath> = {}\n        ) => {\n            const { field, noUpdateOrderFalsyEqualXPath = false } = options\n\n            setOrder(field, noUpdateOrderFalsyEqualXPath)\n\n            setField(field)\n\n            if (state._order === 'default') {\n                state._collection = collection.slice() as T\n                onUpdateCallback()\n            } else {\n                state._collection = (state._collection.slice() as T).sort((l, r) =>\n                    getCompareFunction(\n                        state._order as Exclude<Types.Array.Sort.Order, 'default'>,\n                        getValue(l),\n                        getValue(r)\n                    )\n                )\n                onUpdateCallback()\n            }\n        }\n\n        if (!called) {\n            update({\n                field,\n            })\n            called = true\n        }\n\n        return {\n            cleanup,\n            update,\n        }\n    }\n}\n\nexport { createSort }\n"]}