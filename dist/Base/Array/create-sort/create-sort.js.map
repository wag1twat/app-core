{"version":3,"sources":["Base/Array/create-sort/create-sort.js","../src/Base/Array/create-sort/create-sort.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","createSort","Types_1","require","Guards_1","get_xpath_1","get_compare_function_1","collection","options","let","called","field","order","orders","onUpdate","state","_collection","_order","Types","Array","Sort","defaultOrder","_orders","defaultOrders","_field","undefined","onUpdateCallback","Guards","isFunc","getValue","item","isString","default","isObject","handler","xpath","setField","isUndefined","setOrder","noUpdateOrderFalsyEqualXPath","is","lastOrderIndex","length","nextOrderIndex","indexOf","update","sort","l","r","cleanup"],"mappings":"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","file":"create-sort.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSort = void 0;\nconst Types_1 = require(\"../../Types\");\nconst Guards_1 = require(\"../../../Guards\");\nconst get_xpath_1 = __importDefault(require(\"../../Object/get-xpath\"));\nconst get_compare_function_1 = __importDefault(require(\"./get-compare-function\"));\nconst createSort = (collection) => (options) => {\n    let called = false;\n    const { field, order, orders, onUpdate } = options;\n    const state = {\n        _collection: [...collection],\n        _order: order ? order : Types_1.Types.Array.Sort.defaultOrder,\n        _orders: orders ? orders : Types_1.Types.Array.Sort.defaultOrders,\n        _field: field ? field : undefined,\n    };\n    //callbacks\n    const onUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onUpdate)) {\n            onUpdate(state);\n        }\n    };\n    // utilities\n    const getValue = (item) => {\n        if (Guards_1.Guards.isString(state._field)) {\n            return (0, get_xpath_1.default)(item)(state._field);\n        }\n        if (Guards_1.Guards.isObject(state._field)) {\n            return state._field.handler((0, get_xpath_1.default)(item)(state._field.xpath));\n        }\n        return item;\n    };\n    const cleanup = () => {\n        state._field = field ? field : undefined;\n        state._order = order ? order : Types_1.Types.Array.Sort.defaultOrder;\n        state._orders = orders ? orders : Types_1.Types.Array.Sort.defaultOrders;\n        state._collection = [...collection];\n        onUpdateCallback();\n    };\n    const setField = (field) => {\n        if (!Guards_1.Guards.isUndefined(field)) {\n            state._field = field;\n        }\n    };\n    const setOrder = (field, noUpdateOrderFalsyEqualXPath) => {\n        let is = false;\n        if (noUpdateOrderFalsyEqualXPath) {\n            if (Guards_1.Guards.isString(state._field) && Guards_1.Guards.isString(field)) {\n                if (state._field === field) {\n                    is = true && called;\n                }\n            }\n            else if (Guards_1.Guards.isString(state._field) && Guards_1.Guards.isObject(field)) {\n                if (state._field === field.xpath) {\n                    is = true && called;\n                }\n            }\n            else if (Guards_1.Guards.isObject(state._field) && Guards_1.Guards.isString(field)) {\n                if (state._field.xpath === field) {\n                    is = true && called;\n                }\n            }\n            else if (Guards_1.Guards.isObject(state._field) && Guards_1.Guards.isObject(field)) {\n                if (state._field.xpath === field.xpath) {\n                    is = true && called;\n                }\n            }\n        }\n        else {\n            is = true && called;\n        }\n        if (is) {\n            const lastOrderIndex = state._orders.length - 1;\n            const currentOrderIndex = state._orders.indexOf(state._order);\n            const nextOrderIndex = currentOrderIndex + 1;\n            state._order =\n                nextOrderIndex <= lastOrderIndex\n                    ? state._orders[nextOrderIndex]\n                    : state._orders[0];\n        }\n    };\n    const update = (options = {}) => {\n        const { field, noUpdateOrderFalsyEqualXPath = false } = options;\n        setOrder(field, noUpdateOrderFalsyEqualXPath);\n        setField(field);\n        if (state._order === 'default') {\n            state._collection = [...collection];\n            onUpdateCallback();\n        }\n        else {\n            state._collection = state._collection.sort((l, r) => (0, get_compare_function_1.default)(state._order, getValue(l), getValue(r)));\n            onUpdateCallback();\n        }\n    };\n    if (!called) {\n        update({\n            field,\n        });\n        called = true;\n    }\n    return {\n        cleanup,\n        update,\n    };\n};\nexports.createSort = createSort;\n","import { Types } from '../../Types'\nimport { Guards } from '../../../Guards'\nimport getXPath from '../../Object/get-xpath'\nimport getCompareFunction from './get-compare-function'\n\nconst createSort =\n    <T extends any[]>(collection: T) =>\n    <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n        options: Types.Array.Sort.Options<T, XPath>\n    ) => {\n        let called: boolean = false\n\n        const { field, order, orders, onUpdate } = options\n\n        const state: Types.Array.Sort.State<T> = {\n            _collection: [...collection] as T,\n            _order: order ? order : Types.Array.Sort.defaultOrder,\n            _orders: orders ? orders : Types.Array.Sort.defaultOrders,\n            _field: field ? field : undefined,\n        }\n\n        //callbacks\n        const onUpdateCallback = () => {\n            if (Guards.isFunc(onUpdate)) {\n                onUpdate(state)\n            }\n        }\n        // utilities\n        const getValue = (item: Types.Array.Of<T>) => {\n            if (Guards.isString(state._field)) {\n                return getXPath(item)(state._field)\n            }\n            if (Guards.isObject(state._field)) {\n                return state._field.handler(getXPath(item)(state._field.xpath))\n            }\n            return item\n        }\n\n        const cleanup = () => {\n            state._field = field ? field : undefined\n            state._order = order ? order : Types.Array.Sort.defaultOrder\n            state._orders = orders ? orders : Types.Array.Sort.defaultOrders\n            state._collection = [...collection] as T\n            onUpdateCallback()\n        }\n\n        const setField = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            field: Types.Array.Sort.Field<T, XPath> | undefined\n        ) => {\n            if (!Guards.isUndefined(field)) {\n                state._field = field\n            }\n        }\n\n        const setOrder = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            field: Types.Array.Sort.Field<T, XPath> | undefined,\n            noUpdateOrderFalsyEqualXPath: boolean\n        ) => {\n            let is: boolean = false\n\n            if (noUpdateOrderFalsyEqualXPath) {\n                if (Guards.isString(state._field) && Guards.isString(field)) {\n                    if (state._field === field) {\n                        is = true && called\n                    }\n                } else if (Guards.isString(state._field) && Guards.isObject(field)) {\n                    if (state._field === field.xpath) {\n                        is = true && called\n                    }\n                } else if (Guards.isObject(state._field) && Guards.isString(field)) {\n                    if (state._field.xpath === field) {\n                        is = true && called\n                    }\n                } else if (Guards.isObject(state._field) && Guards.isObject(field)) {\n                    if (state._field.xpath === field.xpath) {\n                        is = true && called\n                    }\n                }\n            } else {\n                is = true && called\n            }\n\n            if (is) {\n                const lastOrderIndex = state._orders.length - 1\n                const currentOrderIndex = state._orders.indexOf(state._order)\n                const nextOrderIndex = currentOrderIndex + 1\n                state._order =\n                    nextOrderIndex <= lastOrderIndex\n                        ? state._orders[nextOrderIndex]\n                        : state._orders[0]\n            }\n        }\n\n        const update = <XPath extends Types.Utility.JSONPath<Types.Array.Of<T>>>(\n            options: Types.Array.Sort.UpdateOptions<T, XPath> = {}\n        ) => {\n            const { field, noUpdateOrderFalsyEqualXPath = false } = options\n\n            setOrder(field, noUpdateOrderFalsyEqualXPath)\n\n            setField(field)\n\n            if (state._order === 'default') {\n                state._collection = [...collection] as T\n                onUpdateCallback()\n            } else {\n                state._collection = state._collection.sort((l, r) =>\n                    getCompareFunction(\n                        state._order as Exclude<Types.Array.Sort.Order, 'default'>,\n                        getValue(l),\n                        getValue(r)\n                    )\n                )\n                onUpdateCallback()\n            }\n        }\n\n        if (!called) {\n            update({\n                field,\n            })\n            called = true\n        }\n\n        return {\n            cleanup,\n            update,\n        }\n    }\n\nexport { createSort }\n"]}