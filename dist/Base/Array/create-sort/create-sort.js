"use strict";var __importDefault=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.createSort=void 0;const Types_1=require("../../Types"),Guards_1=require("../../../Guards"),get_xpath_1=__importDefault(require("../../Object/get-xpath")),get_compare_function_1=__importDefault(require("./get-compare-function")),createSort=f=>e=>{let t=!1;const{field:r,order:d,orders:_,onUpdate:s}=e,a={_collection:f,_order:d||Types_1.Types.Array.Sort.defaultOrder,_orders:_||Types_1.Types.Array.Sort.defaultOrders,_field:r||void 0},i=()=>{Guards_1.Guards.isFunc(s)&&s(a)},o=e=>Guards_1.Guards.isString(a._field)?e[a._field]:Guards_1.Guards.isObject(a._field)?a._field.handler((0,get_xpath_1.default)(e)(a._field.xpath)):e;const u=e=>{Guards_1.Guards.isUndefined(e)||(a._field=e)},l=(e,r)=>{let d=!1;r?Guards_1.Guards.isString(a._field)&&Guards_1.Guards.isString(e)?a._field===e&&(d=t):Guards_1.Guards.isString(a._field)&&Guards_1.Guards.isObject(e)?a._field===e.xpath&&(d=t):Guards_1.Guards.isObject(a._field)&&Guards_1.Guards.isString(e)?a._field.xpath===e&&(d=t):Guards_1.Guards.isObject(a._field)&&Guards_1.Guards.isObject(e)&&a._field.xpath===e.xpath&&(d=t):d=t,d&&(r=a._orders.length-1,e=a._orders.indexOf(a._order)+1,a._order=e<=r?a._orders[e]:a._orders[0])};e=(e={})=>{var{field:e,noUpdateOrderFalsyEqualXPath:r=!1}=e;l(e,r),u(e),"default"===a._order?a._collection=f:a._collection=a._collection.sort((e,r)=>(0,get_compare_function_1.default)(a._order,o(e),o(r))),i()};return t||(e({field:r}),t=!0),{cleanup:()=>{a._field=r||void 0,a._order=d||Types_1.Types.Array.Sort.defaultOrder,a._orders=_||Types_1.Types.Array.Sort.defaultOrders,a._collection=f,i()},update:e}};exports.createSort=createSort;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
