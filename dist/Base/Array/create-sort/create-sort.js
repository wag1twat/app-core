"use strict";var __importDefault=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.createSort=void 0;const Types_1=require("../../Types"),Guards_1=require("../../../Guards"),get_xpath_1=__importDefault(require("../../Object/get-xpath")),get_compare_function_1=__importDefault(require("./get-compare-function")),createSort=f=>e=>{let t=!1;const{field:r,order:d,orders:_,onUpdate:a}=e,s={_collection:[...f],_order:d||Types_1.Types.Array.Sort.defaultOrder,_orders:_||Types_1.Types.Array.Sort.defaultOrders,_field:r||void 0},i=()=>{Guards_1.Guards.isFunc(a)&&a(s)},o=e=>Guards_1.Guards.isString(s._field)?(0,get_xpath_1.default)(e)(s._field):Guards_1.Guards.isObject(s._field)?s._field.handler((0,get_xpath_1.default)(e)(s._field.xpath)):e;const u=e=>{Guards_1.Guards.isUndefined(e)||(s._field=e)},l=(e,r)=>{let d=!1;r?Guards_1.Guards.isString(s._field)&&Guards_1.Guards.isString(e)?s._field===e&&(d=t):Guards_1.Guards.isString(s._field)&&Guards_1.Guards.isObject(e)?s._field===e.xpath&&(d=t):Guards_1.Guards.isObject(s._field)&&Guards_1.Guards.isString(e)?s._field.xpath===e&&(d=t):Guards_1.Guards.isObject(s._field)&&Guards_1.Guards.isObject(e)&&s._field.xpath===e.xpath&&(d=t):d=t,d&&(r=s._orders.length-1,e=s._orders.indexOf(s._order)+1,s._order=e<=r?s._orders[e]:s._orders[0])};e=(e={})=>{var{field:e,noUpdateOrderFalsyEqualXPath:r=!1}=e;l(e,r),u(e),"default"===s._order?s._collection=[...f]:s._collection=s._collection.sort((e,r)=>(0,get_compare_function_1.default)(s._order,o(e),o(r))),i()};return t||(e({field:r}),t=!0),{cleanup:()=>{s._field=r||void 0,s._order=d||Types_1.Types.Array.Sort.defaultOrder,s._orders=_||Types_1.Types.Array.Sort.defaultOrders,s._collection=[...f],i()},update:e}};exports.createSort=createSort;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
