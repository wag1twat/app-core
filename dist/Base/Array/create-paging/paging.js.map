{"version":3,"sources":["Base/Array/create-paging/paging.js","../src/Base/Array/create-paging/paging.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","getCount","itemsLength","pageSize","Math","ceil","paging","options","itemsCount","startsWith","paginationSize","onMount","onPagingUpdate","let","_pagingPage","_pagingPages","state","page","isFirstPage","isLastPage","isFirstPagingPage","isLastPagingPage","pages","getItemsPagesCount","ofCount","Array","from","keys","map","paginPages","i","length","slice","onPagingUpdateCallback","Guards","isFunc","getPaginationPagesCount","getIsFirstPaginationPage","getIsLastPaginationPage","updatePaginationPage","pagingPage","count","updatePage","includes","pagesIndex","findIndex","x","nextPage","prevPage","nextPaginationPage","prevPaginationPage"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,OAAAA,KAAAA,ECDP,MAAAG,SAAAC,QAAA,iBAAA,EAGMC,SAAWA,CAACC,EAAqBC,IAAqBC,KAAKC,KAAKH,EAAcC,CAAQ,EAE/EG,OAAUC,IACnB,KAAM,CACFC,WAAAA,EACAC,WAAAA,EACAN,SAAAA,EACAO,eAAAA,EACAC,QAAAA,EAAU,CAAA,EACVC,eAAAA,CAAc,EACdL,EAEJM,IAAIC,EAAsB,EACtBC,EAA2B,GAE/B,MAAMC,EAAkC,CACpCC,KAAMR,GAAc,EACpBS,YAAa,CAAA,EACbC,WAAY,CAAA,EACZC,kBAAmB,CAAA,EACnBC,iBAAkB,CAAA,EAClBC,MAAO,EAXV,EAcKC,EAAqBA,IAChBtB,SAASO,EAAYL,CAAQ,EAGxC,IACUqB,EAAUC,MAAMC,KAAKD,MAAMF,EAAkB,CAAE,EAAEI,KAAI,CAAE,EAAEC,IAAKX,GAASA,EAAO,CAAC,EAE/EY,EAAa,GAEnB,IAAKhB,IAAIiB,EAAI,EAAGA,EAAI1B,KAAKC,KAAKmB,EAAQO,OAASrB,CAAc,EAAGoB,CAAC,GAC7DD,EAAWC,GAAKN,EAAQQ,MAAMF,EAAIpB,EAAgBoB,EAAIpB,EAAiBA,CAAc,EAGzFK,EAAec,EAKnB,MAAMI,EAAyBA,KACvBlC,SAAAmC,OAAOC,OAAOvB,CAAc,GAC5BA,EAAeI,CAAK,CAE5B,EAEMoB,EAA0BA,IACrBrB,EAAagB,OAGlBM,EAA2BA,IACN,IAAhBvB,EAELwB,EAA0BA,IACrBxB,IAAgBsB,EAAuB,EAS5CG,EAAwBC,IAC1B,IAAMC,EAAQL,EAAuB,EACL,GAAdI,GAA4BA,GAATC,IAEjC3B,EAAc0B,EACdxB,EAAMM,MAAQP,EAAaD,EAAc,GACzCE,EAAMI,kBAAoBiB,EAAwB,EAClDrB,EAAMK,iBAAmBiB,EAAuB,GAEpDL,EAAsB,CAC1B,EAUA,MAAMS,EAAczB,IAChB,IAAMwB,EAAQlB,EAAkB,EACN,GAARN,GAAsBA,GAATwB,IAG3BzB,EAAMC,KAAOA,EACbD,EAAME,YAhCY,IAAfF,EAAMC,KAiCTD,EAAMG,WA9BHH,EAAMC,OAASM,EAAkB,EA+B/BP,EAAMM,MAAMqB,SAAS1B,CAAI,IACpB2B,EAAa7B,EAAa8B,UAAWC,GAAMA,EAAEH,SAAS3B,EAAMC,IAAI,CAAC,EACvEH,EAAc8B,EAAa,EAC3B5B,EAAMM,MAAQP,EAAa6B,GAC3B5B,EAAMI,kBAAoBiB,EAAwB,EAClDrB,EAAMK,iBAAmBiB,EAAuB,IAGxDL,EAAsB,CAC1B,EAeA,OALItB,IACA+B,EAAW1B,EAAMC,IAAI,EACrBgB,EAAsB,GAGnB,CACHS,WAAAA,EACAK,SAfaA,KACbL,EAAW1B,EAAMC,KAAO,CAAC,CAC7B,EAcI+B,SAZaA,KACbN,EAAW1B,EAAMC,KAAO,CAAC,CAC7B,EAWIgC,mBA5CuBA,KACvBV,EAAqBzB,EAAc,CAAC,CACxC,EA2CIoC,mBAzCuBA,KACvBX,EAAqBzB,EAAc,CAAC,CACxC,CA6BA,CAYJ,EA1HajB,QAAAS,OAAMA","file":"paging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paging = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst getCount = (itemsLength, pageSize) => Math.ceil(itemsLength / pageSize);\nconst paging = (options) => {\n    const { itemsCount, startsWith, pageSize, paginationSize, onMount = true, onPagingUpdate, } = options;\n    let _pagingPage = 1;\n    let _pagingPages = [];\n    const state = {\n        page: startsWith || 1,\n        isFirstPage: true,\n        isLastPage: false,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        pages: [],\n    };\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize);\n    };\n    const generatePagingPages = () => {\n        const ofCount = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1);\n        const paginPages = [];\n        for (let i = 0; i < Math.ceil(ofCount.length / paginationSize); i++) {\n            paginPages[i] = ofCount.slice(i * paginationSize, i * paginationSize + paginationSize);\n        }\n        _pagingPages = paginPages;\n    };\n    generatePagingPages();\n    const onPagingUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state);\n        }\n    };\n    const getPaginationPagesCount = () => {\n        return _pagingPages.length;\n    };\n    const getIsFirstPaginationPage = () => {\n        return _pagingPage === 1;\n    };\n    const getIsLastPaginationPage = () => {\n        return _pagingPage === getPaginationPagesCount();\n    };\n    const getIsFirstItemsPage = () => {\n        return state.page === 1;\n    };\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount();\n    };\n    const updatePaginationPage = (pagingPage) => {\n        const count = getPaginationPagesCount();\n        const canUpdate = pagingPage >= 1 && count >= pagingPage;\n        if (canUpdate) {\n            _pagingPage = pagingPage;\n            state.pages = _pagingPages[_pagingPage - 1];\n            state.isFirstPagingPage = getIsFirstPaginationPage();\n            state.isLastPagingPage = getIsLastPaginationPage();\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPaginationPage = () => {\n        updatePaginationPage(_pagingPage + 1);\n    };\n    const prevPaginationPage = () => {\n        updatePaginationPage(_pagingPage - 1);\n    };\n    const updatePage = (page) => {\n        const count = getItemsPagesCount();\n        const canUpdate = page >= 1 && count >= page;\n        if (canUpdate) {\n            state.page = page;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n            if (!state.pages.includes(page)) {\n                const pagesIndex = _pagingPages.findIndex((x) => x.includes(state.page));\n                _pagingPage = pagesIndex + 1;\n                state.pages = _pagingPages[pagesIndex];\n                state.isFirstPagingPage = getIsFirstPaginationPage();\n                state.isLastPagingPage = getIsLastPaginationPage();\n            }\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPage = () => {\n        updatePage(state.page + 1);\n    };\n    const prevPage = () => {\n        updatePage(state.page - 1);\n    };\n    if (onMount) {\n        updatePage(state.page);\n        onPagingUpdateCallback();\n    }\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    };\n};\nexports.paging = paging;\n","import { Guards } from '../../../Guards'\nimport { Types } from '../../Types'\n\nconst getCount = (itemsLength: number, pageSize: number) => Math.ceil(itemsLength / pageSize)\n\nexport const paging = (options: Types.Array.Paging.Options): Types.Array.Paging.PagingMethods => {\n    const {\n        itemsCount,\n        startsWith,\n        pageSize,\n        paginationSize,\n        onMount = true,\n        onPagingUpdate,\n    } = options\n\n    let _pagingPage: number = 1\n    let _pagingPages: number[][] = []\n\n    const state: Types.Array.Paging.State = {\n        page: startsWith || 1,\n        isFirstPage: true,\n        isLastPage: false,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        pages: [],\n    }\n\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize)\n    }\n\n    const generatePagingPages = () => {\n        const ofCount = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1)\n\n        const paginPages = []\n\n        for (let i = 0; i < Math.ceil(ofCount.length / paginationSize); i++) {\n            paginPages[i] = ofCount.slice(i * paginationSize, i * paginationSize + paginationSize)\n        }\n\n        _pagingPages = paginPages\n    }\n\n    generatePagingPages()\n\n    const onPagingUpdateCallback = () => {\n        if (Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state)\n        }\n    }\n\n    const getPaginationPagesCount = () => {\n        return _pagingPages.length\n    }\n\n    const getIsFirstPaginationPage = () => {\n        return _pagingPage === 1\n    }\n    const getIsLastPaginationPage = () => {\n        return _pagingPage === getPaginationPagesCount()\n    }\n    const getIsFirstItemsPage = () => {\n        return state.page === 1\n    }\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount()\n    }\n\n    const updatePaginationPage = (pagingPage: number) => {\n        const count = getPaginationPagesCount()\n        const canUpdate = pagingPage >= 1 && count >= pagingPage\n        if (canUpdate) {\n            _pagingPage = pagingPage\n            state.pages = _pagingPages[_pagingPage - 1]\n            state.isFirstPagingPage = getIsFirstPaginationPage()\n            state.isLastPagingPage = getIsLastPaginationPage()\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPaginationPage = () => {\n        updatePaginationPage(_pagingPage + 1)\n    }\n\n    const prevPaginationPage = () => {\n        updatePaginationPage(_pagingPage - 1)\n    }\n\n    const updatePage = (page: number) => {\n        const count = getItemsPagesCount()\n        const canUpdate = page >= 1 && count >= page\n\n        if (canUpdate) {\n            state.page = page\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n            if (!state.pages.includes(page)) {\n                const pagesIndex = _pagingPages.findIndex((x) => x.includes(state.page))\n                _pagingPage = pagesIndex + 1\n                state.pages = _pagingPages[pagesIndex]\n                state.isFirstPagingPage = getIsFirstPaginationPage()\n                state.isLastPagingPage = getIsLastPaginationPage()\n            }\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPage = () => {\n        updatePage(state.page + 1)\n    }\n\n    const prevPage = () => {\n        updatePage(state.page - 1)\n    }\n\n    if (onMount) {\n        updatePage(state.page)\n        onPagingUpdateCallback()\n    }\n\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    }\n}\n"]}