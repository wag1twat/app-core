{"version":3,"sources":["Base/Array/create-paging/paging.js","../src/Base/Array/create-paging/paging.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","getCount","itemsLength","pageSize","Math","ceil","paging","options","itemsCount","paginationSize","onPagingUpdate","state","page","isFirstPage","isLastPage","_pagingPage","isFirstPagingPage","isLastPagingPage","_pagingPages","pages","onPagingUpdateCallback","Guards","isFunc","getPaginationPagesCount","length","getItemsPagesCount","getVisiblePaginationPages","slice","getIsFirstPaginationPage","getIsLastPaginationPage","getFirstVisiblePaginationPage","getLastVisiblePaginationPage","getIsFirstItemsPage","getIsLastItemsPage","nextPaginationPage","count","prevPaginationPage","Array","from","keys","map","updatePage","firstVisiblePaginationPage","lastVisiblePaginationPage","nextPage","prevPage","install"],"mappings":"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","file":"paging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paging = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst getCount = (itemsLength, pageSize) => Math.ceil(itemsLength / pageSize);\nconst paging = (options) => {\n    const { itemsCount, pageSize, paginationSize, onPagingUpdate } = options;\n    const state = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    };\n    const onPagingUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state);\n        }\n    };\n    const getPaginationPagesCount = () => {\n        return getCount(state._pagingPages.length, paginationSize);\n    };\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize);\n    };\n    const getVisiblePaginationPages = () => {\n        return state._pagingPages.slice((state._pagingPage - 1) * paginationSize, state._pagingPage * paginationSize);\n    };\n    const install = () => {\n        state._pagingPages = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1);\n        state.pages = getVisiblePaginationPages();\n    };\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1;\n    };\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount();\n    };\n    const getFirstVisiblePaginationPage = () => {\n        return state.pages[0];\n    };\n    const getLastVisiblePaginationPage = () => {\n        return state.pages[state.pages.length - 1];\n    };\n    const getIsFirstItemsPage = () => {\n        return state.page === 1;\n    };\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount();\n    };\n    const nextPaginationPage = () => {\n        const count = getPaginationPagesCount();\n        const nextPaginationPage = state._pagingPage + 1;\n        const canUpdate = count >= nextPaginationPage;\n        if (canUpdate) {\n            state._pagingPage = nextPaginationPage;\n            state.isFirstPagingPage = getIsFirstPaginationPage();\n            state.isLastPagingPage = getIsLastPaginationPage();\n            state.pages = getVisiblePaginationPages();\n            onPagingUpdateCallback();\n        }\n    };\n    const prevPaginationPage = () => {\n        const prevPaginationPage = state._pagingPage - 1;\n        const canUpdate = prevPaginationPage >= 1;\n        if (canUpdate) {\n            state._pagingPage = prevPaginationPage;\n            state.isFirstPagingPage = getIsFirstPaginationPage();\n            state.isLastPagingPage = getIsLastPaginationPage();\n            state.pages = getVisiblePaginationPages();\n            onPagingUpdateCallback();\n        }\n    };\n    const updatePage = (page) => {\n        const count = getItemsPagesCount();\n        const canUpdate = page >= 1 && count >= page;\n        if (canUpdate) {\n            state.page = page;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n            // state.pages = getVisiblePaginationPages()\n            onPagingUpdateCallback();\n        }\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage();\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage();\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage();\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage();\n        }\n    };\n    const nextPage = () => {\n        const count = getItemsPagesCount();\n        const nextPage = state.page + 1;\n        const canUpdate = count >= nextPage;\n        if (canUpdate) {\n            state.page = nextPage;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n            onPagingUpdateCallback();\n        }\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage();\n        if (nextPage > lastVisiblePaginationPage) {\n            nextPaginationPage();\n        }\n    };\n    const prevPage = () => {\n        const prevPage = state.page - 1;\n        const canUpdate = prevPage >= 1;\n        if (canUpdate) {\n            state.page = prevPage;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n            onPagingUpdateCallback();\n        }\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage();\n        if (firstVisiblePaginationPage > prevPage) {\n            prevPaginationPage();\n        }\n    };\n    install();\n    onPagingUpdateCallback();\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    };\n};\nexports.paging = paging;\n","import { Guards } from '../../../Guards'\nimport { Types } from '../../Types'\n\nconst getCount = (itemsLength: number, pageSize: number) => Math.ceil(itemsLength / pageSize)\n\nexport const paging = (options: Types.Array.Paging.Options) => {\n    const { itemsCount, pageSize, paginationSize, onPagingUpdate } = options\n\n    const state: Types.Array.Paging.State = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    }\n\n    const onPagingUpdateCallback = () => {\n        if (Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state)\n        }\n    }\n\n    const getPaginationPagesCount = () => {\n        return getCount(state._pagingPages.length, paginationSize)\n    }\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize)\n    }\n\n    const getVisiblePaginationPages = () => {\n        return state._pagingPages.slice(\n            (state._pagingPage - 1) * paginationSize,\n            state._pagingPage * paginationSize\n        )\n    }\n\n    const install = () => {\n        state._pagingPages = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1)\n        state.pages = getVisiblePaginationPages()\n    }\n\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1\n    }\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount()\n    }\n    const getFirstVisiblePaginationPage = () => {\n        return state.pages[0]\n    }\n    const getLastVisiblePaginationPage = () => {\n        return state.pages[state.pages.length - 1]\n    }\n    const getIsFirstItemsPage = () => {\n        return state.page === 1\n    }\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount()\n    }\n\n    const nextPaginationPage = () => {\n        const count = getPaginationPagesCount()\n        const nextPaginationPage = state._pagingPage + 1\n        const canUpdate = count >= nextPaginationPage\n        if (canUpdate) {\n            state._pagingPage = nextPaginationPage\n            state.isFirstPagingPage = getIsFirstPaginationPage()\n            state.isLastPagingPage = getIsLastPaginationPage()\n            state.pages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n    }\n\n    const prevPaginationPage = () => {\n        const prevPaginationPage = state._pagingPage - 1\n        const canUpdate = prevPaginationPage >= 1\n        if (canUpdate) {\n            state._pagingPage = prevPaginationPage\n            state.isFirstPagingPage = getIsFirstPaginationPage()\n            state.isLastPagingPage = getIsLastPaginationPage()\n            state.pages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n    }\n\n    const updatePage = (page: number) => {\n        const count = getItemsPagesCount()\n        const canUpdate = page >= 1 && count >= page\n        if (canUpdate) {\n            state.page = page\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n            // state.pages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage()\n\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage()\n\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage()\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage()\n        }\n    }\n\n    const nextPage = () => {\n        const count = getItemsPagesCount()\n        const nextPage = state.page + 1\n        const canUpdate = count >= nextPage\n        if (canUpdate) {\n            state.page = nextPage\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n            onPagingUpdateCallback()\n        }\n\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage()\n\n        if (nextPage > lastVisiblePaginationPage) {\n            nextPaginationPage()\n        }\n    }\n\n    const prevPage = () => {\n        const prevPage = state.page - 1\n        const canUpdate = prevPage >= 1\n        if (canUpdate) {\n            state.page = prevPage\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n            onPagingUpdateCallback()\n        }\n\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage()\n\n        if (firstVisiblePaginationPage > prevPage) {\n            prevPaginationPage()\n        }\n    }\n\n    install()\n\n    onPagingUpdateCallback()\n\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    }\n}\n"]}