{"version":3,"sources":["Base/Array/create-paging/paging.js","../src/Base/Array/create-paging/paging.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","getCount","itemsLength","pageSize","Math","ceil","paging","options","itemsCount","paginationSize","onPagingUpdate","state","_page","_isFirstPage","_isLastPage","_paginationPage","_isFirstPaginationPage","_isLastPaginationPage","_paginationPages","_visiblePaginationPages","onPagingUpdateCallback","Guards","isFunc","getPaginationPagesCount","length","getItemsPagesCount","getVisiblePaginationPages","slice","getIsFirstPaginationPage","getIsLastPaginationPage","getFirstVisiblePaginationPage","getLastVisiblePaginationPage","getIsFirstItemsPage","getIsLastItemsPage","nextPaginationPage","count","prevPaginationPage","Array","from","keys","map","page","setPage","firstVisiblePaginationPage","lastVisiblePaginationPage","nextPage","prevPage","install"],"mappings":"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","file":"paging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paging = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst getCount = (itemsLength, pageSize) => Math.ceil(itemsLength / pageSize);\nconst paging = (options) => {\n    const { itemsCount, pageSize, paginationSize, onPagingUpdate } = options;\n    const state = {\n        _page: 1,\n        _isFirstPage: true,\n        _isLastPage: false,\n        _paginationPage: 1,\n        _isFirstPaginationPage: true,\n        _isLastPaginationPage: false,\n        _paginationPages: [],\n        _visiblePaginationPages: [],\n    };\n    const onPagingUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state);\n        }\n    };\n    const getPaginationPagesCount = () => {\n        return getCount(state._paginationPages.length, paginationSize);\n    };\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize);\n    };\n    const getVisiblePaginationPages = () => {\n        return state._paginationPages.slice((state._paginationPage - 1) * paginationSize, state._paginationPage * paginationSize);\n    };\n    const install = () => {\n        state._paginationPages = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1);\n        state._visiblePaginationPages = getVisiblePaginationPages();\n    };\n    const getIsFirstPaginationPage = () => {\n        return state._paginationPage === 1;\n    };\n    const getIsLastPaginationPage = () => {\n        return state._paginationPage === getPaginationPagesCount();\n    };\n    const getFirstVisiblePaginationPage = () => {\n        return state._visiblePaginationPages[0];\n    };\n    const getLastVisiblePaginationPage = () => {\n        return state._visiblePaginationPages[state._visiblePaginationPages.length - 1];\n    };\n    const getIsFirstItemsPage = () => {\n        return state._page === 1;\n    };\n    const getIsLastItemsPage = () => {\n        return state._page === getItemsPagesCount();\n    };\n    const nextPaginationPage = () => {\n        const count = getPaginationPagesCount();\n        const nextPaginationPage = state._paginationPage + 1;\n        const canUpdate = count >= nextPaginationPage;\n        if (canUpdate) {\n            state._paginationPage = nextPaginationPage;\n            state._isFirstPaginationPage = getIsFirstPaginationPage();\n            state._isLastPaginationPage = getIsLastPaginationPage();\n            state._visiblePaginationPages = getVisiblePaginationPages();\n            onPagingUpdateCallback();\n        }\n    };\n    const prevPaginationPage = () => {\n        const prevPaginationPage = state._paginationPage - 1;\n        const canUpdate = prevPaginationPage >= 1;\n        if (canUpdate) {\n            state._paginationPage = prevPaginationPage;\n            state._isFirstPaginationPage = getIsFirstPaginationPage();\n            state._isLastPaginationPage = getIsLastPaginationPage();\n            state._visiblePaginationPages = getVisiblePaginationPages();\n            onPagingUpdateCallback();\n        }\n    };\n    const setPage = (page) => {\n        const count = getItemsPagesCount();\n        const canUpdate = page >= 1 && count >= page;\n        if (canUpdate) {\n            state._page = page;\n            state._isFirstPage = getIsFirstItemsPage();\n            state._isLastPage = getIsLastItemsPage();\n            state._isLastPaginationPage = getIsLastPaginationPage();\n            state._visiblePaginationPages = getVisiblePaginationPages();\n            onPagingUpdateCallback();\n        }\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage();\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage();\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage();\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage();\n        }\n    };\n    const nextPage = () => {\n        const count = getItemsPagesCount();\n        const nextPage = state._page + 1;\n        const canUpdate = count >= nextPage;\n        if (canUpdate) {\n            state._page = nextPage;\n            state._isFirstPage = getIsFirstItemsPage();\n            state._isLastPage = getIsLastItemsPage();\n            onPagingUpdateCallback();\n        }\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage();\n        if (nextPage > lastVisiblePaginationPage) {\n            nextPaginationPage();\n        }\n    };\n    const prevPage = () => {\n        const prevPage = state._page - 1;\n        const canUpdate = prevPage >= 1;\n        if (canUpdate) {\n            state._page = prevPage;\n            state._isFirstPage = getIsFirstItemsPage();\n            state._isLastPage = getIsLastItemsPage();\n            onPagingUpdateCallback();\n        }\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage();\n        if (firstVisiblePaginationPage > prevPage) {\n            prevPaginationPage();\n        }\n    };\n    install();\n    onPagingUpdateCallback();\n    return {\n        setPage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    };\n};\nexports.paging = paging;\n","import { Guards } from '../../../Guards'\nimport { Types } from '../../Types'\n\nconst getCount = (itemsLength: number, pageSize: number) => Math.ceil(itemsLength / pageSize)\n\nexport const paging = (options: Types.Array.Paging.Options) => {\n    const { itemsCount, pageSize, paginationSize, onPagingUpdate } = options\n\n    const state: Types.Array.Paging.State = {\n        _page: 1,\n        _isFirstPage: true,\n        _isLastPage: false,\n        _paginationPage: 1,\n        _isFirstPaginationPage: true,\n        _isLastPaginationPage: false,\n        _paginationPages: [],\n        _visiblePaginationPages: [],\n    }\n\n    const onPagingUpdateCallback = () => {\n        if (Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state)\n        }\n    }\n\n    const getPaginationPagesCount = () => {\n        return getCount(state._paginationPages.length, paginationSize)\n    }\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize)\n    }\n\n    const getVisiblePaginationPages = () => {\n        return state._paginationPages.slice(\n            (state._paginationPage - 1) * paginationSize,\n            state._paginationPage * paginationSize\n        )\n    }\n\n    const install = () => {\n        state._paginationPages = Array.from(Array(getItemsPagesCount()).keys()).map(\n            (page) => page + 1\n        )\n        state._visiblePaginationPages = getVisiblePaginationPages()\n    }\n\n    const getIsFirstPaginationPage = () => {\n        return state._paginationPage === 1\n    }\n    const getIsLastPaginationPage = () => {\n        return state._paginationPage === getPaginationPagesCount()\n    }\n    const getFirstVisiblePaginationPage = () => {\n        return state._visiblePaginationPages[0]\n    }\n    const getLastVisiblePaginationPage = () => {\n        return state._visiblePaginationPages[state._visiblePaginationPages.length - 1]\n    }\n    const getIsFirstItemsPage = () => {\n        return state._page === 1\n    }\n    const getIsLastItemsPage = () => {\n        return state._page === getItemsPagesCount()\n    }\n\n    const nextPaginationPage = () => {\n        const count = getPaginationPagesCount()\n        const nextPaginationPage = state._paginationPage + 1\n        const canUpdate = count >= nextPaginationPage\n        if (canUpdate) {\n            state._paginationPage = nextPaginationPage\n            state._isFirstPaginationPage = getIsFirstPaginationPage()\n            state._isLastPaginationPage = getIsLastPaginationPage()\n            state._visiblePaginationPages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n    }\n\n    const prevPaginationPage = () => {\n        const prevPaginationPage = state._paginationPage - 1\n        const canUpdate = prevPaginationPage >= 1\n        if (canUpdate) {\n            state._paginationPage = prevPaginationPage\n            state._isFirstPaginationPage = getIsFirstPaginationPage()\n            state._isLastPaginationPage = getIsLastPaginationPage()\n            state._visiblePaginationPages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n    }\n\n    const setPage = (page: number) => {\n        const count = getItemsPagesCount()\n        const canUpdate = page >= 1 && count >= page\n        if (canUpdate) {\n            state._page = page\n            state._isFirstPage = getIsFirstItemsPage()\n            state._isLastPage = getIsLastItemsPage()\n            state._isLastPaginationPage = getIsLastPaginationPage()\n            state._visiblePaginationPages = getVisiblePaginationPages()\n            onPagingUpdateCallback()\n        }\n\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage()\n\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage()\n\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage()\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage()\n        }\n    }\n\n    const nextPage = () => {\n        const count = getItemsPagesCount()\n        const nextPage = state._page + 1\n        const canUpdate = count >= nextPage\n        if (canUpdate) {\n            state._page = nextPage\n            state._isFirstPage = getIsFirstItemsPage()\n            state._isLastPage = getIsLastItemsPage()\n            onPagingUpdateCallback()\n        }\n\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage()\n\n        if (nextPage > lastVisiblePaginationPage) {\n            nextPaginationPage()\n        }\n    }\n\n    const prevPage = () => {\n        const prevPage = state._page - 1\n        const canUpdate = prevPage >= 1\n        if (canUpdate) {\n            state._page = prevPage\n            state._isFirstPage = getIsFirstItemsPage()\n            state._isLastPage = getIsLastItemsPage()\n            onPagingUpdateCallback()\n        }\n\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage()\n\n        if (firstVisiblePaginationPage > prevPage) {\n            prevPaginationPage()\n        }\n    }\n\n    install()\n\n    onPagingUpdateCallback()\n\n    return {\n        setPage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    }\n}\n"]}