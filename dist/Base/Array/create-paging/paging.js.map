{"version":3,"sources":["Base/Array/create-paging/paging.js","../src/Base/Array/create-paging/paging.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","getCount","itemsLength","pageSize","Math","ceil","paging","options","itemsCount","page","paginationSize","onPagingUpdate","state","isFirstPage","isLastPage","_pagingPage","isFirstPagingPage","isLastPagingPage","_pagingPages","pages","getItemsPagesCount","getVisiblePaginationPages","slice","onPagingUpdateCallback","Array","from","keys","map","Guards","isFunc","getPaginationPagesCount","length","updatePaginationPage","pagingPage","count","nextPaginationPage","prevPaginationPage","updatePage","firstVisiblePaginationPage","lastVisiblePaginationPage","nextPage","prevPage"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,OAAAA,KAAAA,ECDP,MAAAG,SAAAC,QAAA,iBAAA,EAGMC,SAAWA,CAACC,EAAqBC,IAAqBC,KAAKC,KAAKH,EAAcC,CAAQ,EAE/EG,OAAUC,IACnB,KAAM,CAAEC,WAAAA,EAAYC,KAAAA,EAAMN,SAAAA,EAAUO,eAAAA,EAAgBC,eAAAA,CAAc,EAAKJ,EAEjEK,EAAkC,CACpCH,KAAM,EACNI,YAAa,CAAA,EACbC,WAAY,CAAA,EACZC,YAAa,EACbC,kBAAmB,CAAA,EACnBC,iBAAkB,CAAA,EAClBC,aAAc,GACdC,MAAO,EARX,EAWMC,EAAqBA,IAChBnB,SAASO,EAAYL,CAAQ,EAGlCkB,EAA4BA,IACvBT,EAAMM,aAAaI,OACrBV,EAAMG,YAAc,GAAKL,EAC1BE,EAAMG,YAAcL,CAAc,EAQpCa,GAJNX,EAAMM,aAAeM,MAAMC,KAAKD,MAAMJ,EAAkB,CAAE,EAAEM,KAAI,CAAE,EAAEC,IAAKlB,GAASA,EAAO,CAAC,EAE1FG,EAAMO,MAAQE,EAAyB,EAERE,KACvBxB,SAAA6B,OAAOC,OAAOlB,CAAc,GAC5BA,EAAeC,CAAK,CAE5B,GAEMkB,EAA0BA,IACrB7B,SAASW,EAAMM,aAAaa,OAAQrB,CAAc,EAsBvDsB,EAAwBC,IAC1B,IAAMC,EAAQJ,EAAuB,EACL,GAAdG,GAA4BA,GAATC,IAEjCtB,EAAMG,YAAckB,EACpBrB,EAAMI,kBAvBmB,IAAtBJ,EAAMG,YAwBTH,EAAMK,iBArBHL,EAAMG,cAAgBe,EAAuB,EAsBhDlB,EAAMO,MAAQE,EAAyB,GAE3CE,EAAsB,CAC1B,EAEMY,EAAqBA,KACvBH,EAAqBpB,EAAMG,YAAc,CAAC,CAC9C,EAEMqB,EAAqBA,KACvBJ,EAAqBpB,EAAMG,YAAc,CAAC,CAC9C,EAEMsB,EAAc5B,IAChB,IAAMyB,EAAQd,EAAkB,EAQ1BkB,GAPoB,GAAR7B,GAAsBA,GAATyB,IAE3BtB,EAAMH,KAAOA,EACbG,EAAMC,YA/BY,IAAfD,EAAMH,KAgCTG,EAAME,WA7BHF,EAAMH,OAASW,EAAkB,GATjCR,EAAMO,MAAM,IA2CboB,EAxCC3B,EAAMO,MAAMP,EAAMO,MAAMY,OAAS,GA0CpCtB,EAAO6B,GACPF,EAAkB,EAEXG,EAAP9B,GACA0B,EAAkB,EAEtBZ,EAAsB,CAC1B,EAcA,OAJAc,EAAW5B,CAAI,EAEfc,EAAsB,EAEf,CACHc,WAAAA,EACAG,SAdaA,KACbH,EAAWzB,EAAMH,KAAO,CAAC,CAC7B,EAaIgC,SAXaA,KACbJ,EAAWzB,EAAMH,KAAO,CAAC,CAC7B,EAUI0B,mBAAAA,EACAC,mBAAAA,CAXH,CAaL,EAvHavC,QAAAS,OAAMA","file":"paging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paging = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst getCount = (itemsLength, pageSize) => Math.ceil(itemsLength / pageSize);\nconst paging = (options) => {\n    const { itemsCount, page, pageSize, paginationSize, onPagingUpdate } = options;\n    const state = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    };\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize);\n    };\n    const getVisiblePaginationPages = () => {\n        return state._pagingPages.slice((state._pagingPage - 1) * paginationSize, state._pagingPage * paginationSize);\n    };\n    state._pagingPages = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1);\n    state.pages = getVisiblePaginationPages();\n    const onPagingUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state);\n        }\n    };\n    const getPaginationPagesCount = () => {\n        return getCount(state._pagingPages.length, paginationSize);\n    };\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1;\n    };\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount();\n    };\n    const getFirstVisiblePaginationPage = () => {\n        return state.pages[0];\n    };\n    const getLastVisiblePaginationPage = () => {\n        return state.pages[state.pages.length - 1];\n    };\n    const getIsFirstItemsPage = () => {\n        return state.page === 1;\n    };\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount();\n    };\n    const updatePaginationPage = (pagingPage) => {\n        const count = getPaginationPagesCount();\n        const canUpdate = pagingPage >= 1 && count >= pagingPage;\n        if (canUpdate) {\n            state._pagingPage = pagingPage;\n            state.isFirstPagingPage = getIsFirstPaginationPage();\n            state.isLastPagingPage = getIsLastPaginationPage();\n            state.pages = getVisiblePaginationPages();\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPaginationPage = () => {\n        updatePaginationPage(state._pagingPage + 1);\n    };\n    const prevPaginationPage = () => {\n        updatePaginationPage(state._pagingPage - 1);\n    };\n    const updatePage = (page) => {\n        const count = getItemsPagesCount();\n        const canUpdate = page >= 1 && count >= page;\n        if (canUpdate) {\n            state.page = page;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n        }\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage();\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage();\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage();\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage();\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPage = () => {\n        updatePage(state.page + 1);\n    };\n    const prevPage = () => {\n        updatePage(state.page - 1);\n    };\n    updatePage(page);\n    onPagingUpdateCallback();\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    };\n};\nexports.paging = paging;\n","import { Guards } from '../../../Guards'\nimport { Types } from '../../Types'\n\nconst getCount = (itemsLength: number, pageSize: number) => Math.ceil(itemsLength / pageSize)\n\nexport const paging = (options: Types.Array.Paging.Options) => {\n    const { itemsCount, page, pageSize, paginationSize, onPagingUpdate } = options\n\n    const state: Types.Array.Paging.State = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    }\n\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize)\n    }\n\n    const getVisiblePaginationPages = () => {\n        return state._pagingPages.slice(\n            (state._pagingPage - 1) * paginationSize,\n            state._pagingPage * paginationSize\n        )\n    }\n\n    state._pagingPages = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1)\n\n    state.pages = getVisiblePaginationPages()\n\n    const onPagingUpdateCallback = () => {\n        if (Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state)\n        }\n    }\n\n    const getPaginationPagesCount = () => {\n        return getCount(state._pagingPages.length, paginationSize)\n    }\n\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1\n    }\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount()\n    }\n    const getFirstVisiblePaginationPage = () => {\n        return state.pages[0]\n    }\n    const getLastVisiblePaginationPage = () => {\n        return state.pages[state.pages.length - 1]\n    }\n    const getIsFirstItemsPage = () => {\n        return state.page === 1\n    }\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount()\n    }\n\n    const updatePaginationPage = (pagingPage: number) => {\n        const count = getPaginationPagesCount()\n        const canUpdate = pagingPage >= 1 && count >= pagingPage\n        if (canUpdate) {\n            state._pagingPage = pagingPage\n            state.isFirstPagingPage = getIsFirstPaginationPage()\n            state.isLastPagingPage = getIsLastPaginationPage()\n            state.pages = getVisiblePaginationPages()\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPaginationPage = () => {\n        updatePaginationPage(state._pagingPage + 1)\n    }\n\n    const prevPaginationPage = () => {\n        updatePaginationPage(state._pagingPage - 1)\n    }\n\n    const updatePage = (page: number) => {\n        const count = getItemsPagesCount()\n        const canUpdate = page >= 1 && count >= page\n        if (canUpdate) {\n            state.page = page\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n        }\n\n        const firstVisiblePaginationPage = getFirstVisiblePaginationPage()\n\n        const lastVisiblePaginationPage = getLastVisiblePaginationPage()\n\n        if (page < firstVisiblePaginationPage) {\n            prevPaginationPage()\n        }\n        if (page > lastVisiblePaginationPage) {\n            nextPaginationPage()\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPage = () => {\n        updatePage(state.page + 1)\n    }\n\n    const prevPage = () => {\n        updatePage(state.page - 1)\n    }\n\n    updatePage(page)\n\n    onPagingUpdateCallback()\n\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    }\n}\n"]}