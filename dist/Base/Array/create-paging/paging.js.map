{"version":3,"sources":["Base/Array/create-paging/paging.js","../src/Base/Array/create-paging/paging.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","getCount","itemsLength","pageSize","Math","ceil","paging","options","itemsCount","page","paginationSize","onPagingUpdate","state","isFirstPage","isLastPage","_pagingPage","isFirstPagingPage","isLastPagingPage","_pagingPages","pages","getItemsPagesCount","ofCount","Array","from","keys","map","paginPages","let","i","length","slice","onPagingUpdateCallback","Guards","isFunc","getPaginationPagesCount","getIsFirstPaginationPage","getIsLastPaginationPage","updatePaginationPage","pagingPage","count","updatePage","includes","pagesIndex","findIndex","x","nextPage","prevPage","nextPaginationPage","prevPaginationPage"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,OAAAA,KAAAA,ECDP,MAAAG,SAAAC,QAAA,iBAAA,EAGMC,SAAWA,CAACC,EAAqBC,IAAqBC,KAAKC,KAAKH,EAAcC,CAAQ,EAE/EG,OAAUC,IACnB,KAAM,CAAEC,WAAAA,EAAYC,KAAAA,EAAO,EAAGN,SAAAA,EAAUO,eAAAA,EAAgBC,eAAAA,CAAc,EAAKJ,EAErEK,EAAkC,CACpCH,KAAM,EACNI,YAAa,CAAA,EACbC,WAAY,CAAA,EACZC,YAAa,EACbC,kBAAmB,CAAA,EACnBC,iBAAkB,CAAA,EAClBC,aAAc,GACdC,MAAO,EARX,EAWMC,EAAqBA,IAChBnB,SAASO,EAAYL,CAAQ,EAGxC,IACUkB,EAAUC,MAAMC,KAAKD,MAAMF,EAAkB,CAAE,EAAEI,KAAI,CAAE,EAAEC,IAAKhB,GAASA,EAAO,CAAC,EAE/EiB,EAAa,GAEnB,IAAKC,IAAIC,EAAI,EAAGA,EAAIxB,KAAKC,KAAKgB,EAAQQ,OAASnB,CAAc,EAAGkB,CAAC,GAC7DF,EAAWE,GAAKP,EAAQS,MAAMF,EAAIlB,EAAgBkB,EAAIlB,EAAiBA,CAAc,EAGzFE,EAAMM,aAAeQ,EAKzB,MAAMK,EAAyBA,KACvBhC,SAAAiC,OAAOC,OAAOtB,CAAc,GAC5BA,EAAeC,CAAK,CAE5B,EAEMsB,EAA0BA,IACrBtB,EAAMM,aAAaW,OAGxBM,EAA2BA,IACA,IAAtBvB,EAAMG,YAEXqB,EAA0BA,IACrBxB,EAAMG,cAAgBmB,EAAuB,EASlDG,EAAwBC,IAC1B,IAAMC,EAAQL,EAAuB,EACL,GAAdI,GAA4BA,GAATC,IAEjC3B,EAAMG,YAAcuB,EACpB1B,EAAMO,MAAQP,EAAMM,aAAaN,EAAMG,YAAc,GACrDH,EAAMI,kBAAoBmB,EAAwB,EAClDvB,EAAMK,iBAAmBmB,EAAuB,GAEpDL,EAAsB,CAC1B,EAUA,MAAMS,EAAc/B,IAChB,IAAM8B,EAAQnB,EAAkB,EACN,GAARX,GAAsBA,GAAT8B,IAG3B3B,EAAMH,KAAOA,EACbG,EAAMC,YAhCY,IAAfD,EAAMH,KAiCTG,EAAME,WA9BHF,EAAMH,OAASW,EAAkB,EA+B/BR,EAAMO,MAAMsB,SAAShC,CAAI,IACpBiC,EAAa9B,EAAMM,aAAayB,UAAWC,GAAMA,EAAEH,SAAS7B,EAAMH,IAAI,CAAC,EAC7EG,EAAMG,YAAc2B,EAAa,EACjC9B,EAAMO,MAAQP,EAAMM,aAAawB,GACjC9B,EAAMI,kBAAoBmB,EAAwB,EAClDvB,EAAMK,iBAAmBmB,EAAuB,IAGxDL,EAAsB,CAC1B,EAcA,OAJAS,EAAW/B,CAAI,EAEfsB,EAAsB,EAEf,CACHS,WAAAA,EACAK,SAdaA,KACbL,EAAW5B,EAAMH,KAAO,CAAC,CAC7B,EAaIqC,SAXaA,KACbN,EAAW5B,EAAMH,KAAO,CAAC,CAC7B,EAUIsC,mBA3CuBA,KACvBV,EAAqBzB,EAAMG,YAAc,CAAC,CAC9C,EA0CIiC,mBAxCuBA,KACvBX,EAAqBzB,EAAMG,YAAc,CAAC,CAC9C,CA2BC,CAaL,EAjHalB,QAAAS,OAAMA","file":"paging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paging = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst getCount = (itemsLength, pageSize) => Math.ceil(itemsLength / pageSize);\nconst paging = (options) => {\n    const { itemsCount, page = 1, pageSize, paginationSize, onPagingUpdate } = options;\n    const state = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    };\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize);\n    };\n    const generatePagingPages = () => {\n        const ofCount = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1);\n        const paginPages = [];\n        for (let i = 0; i < Math.ceil(ofCount.length / paginationSize); i++) {\n            paginPages[i] = ofCount.slice(i * paginationSize, i * paginationSize + paginationSize);\n        }\n        state._pagingPages = paginPages;\n    };\n    generatePagingPages();\n    const onPagingUpdateCallback = () => {\n        if (Guards_1.Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state);\n        }\n    };\n    const getPaginationPagesCount = () => {\n        return state._pagingPages.length;\n    };\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1;\n    };\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount();\n    };\n    const getIsFirstItemsPage = () => {\n        return state.page === 1;\n    };\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount();\n    };\n    const updatePaginationPage = (pagingPage) => {\n        const count = getPaginationPagesCount();\n        const canUpdate = pagingPage >= 1 && count >= pagingPage;\n        if (canUpdate) {\n            state._pagingPage = pagingPage;\n            state.pages = state._pagingPages[state._pagingPage - 1];\n            state.isFirstPagingPage = getIsFirstPaginationPage();\n            state.isLastPagingPage = getIsLastPaginationPage();\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPaginationPage = () => {\n        updatePaginationPage(state._pagingPage + 1);\n    };\n    const prevPaginationPage = () => {\n        updatePaginationPage(state._pagingPage - 1);\n    };\n    const updatePage = (page) => {\n        const count = getItemsPagesCount();\n        const canUpdate = page >= 1 && count >= page;\n        if (canUpdate) {\n            state.page = page;\n            state.isFirstPage = getIsFirstItemsPage();\n            state.isLastPage = getIsLastItemsPage();\n            if (!state.pages.includes(page)) {\n                const pagesIndex = state._pagingPages.findIndex((x) => x.includes(state.page));\n                state._pagingPage = pagesIndex + 1;\n                state.pages = state._pagingPages[pagesIndex];\n                state.isFirstPagingPage = getIsFirstPaginationPage();\n                state.isLastPagingPage = getIsLastPaginationPage();\n            }\n        }\n        onPagingUpdateCallback();\n    };\n    const nextPage = () => {\n        updatePage(state.page + 1);\n    };\n    const prevPage = () => {\n        updatePage(state.page - 1);\n    };\n    updatePage(page);\n    onPagingUpdateCallback();\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    };\n};\nexports.paging = paging;\n","import { Guards } from '../../../Guards'\nimport { Types } from '../../Types'\n\nconst getCount = (itemsLength: number, pageSize: number) => Math.ceil(itemsLength / pageSize)\n\nexport const paging = (options: Types.Array.Paging.Options) => {\n    const { itemsCount, page = 1, pageSize, paginationSize, onPagingUpdate } = options\n\n    const state: Types.Array.Paging.State = {\n        page: 1,\n        isFirstPage: true,\n        isLastPage: false,\n        _pagingPage: 1,\n        isFirstPagingPage: true,\n        isLastPagingPage: false,\n        _pagingPages: [],\n        pages: [],\n    }\n\n    const getItemsPagesCount = () => {\n        return getCount(itemsCount, pageSize)\n    }\n\n    const generatePagingPages = () => {\n        const ofCount = Array.from(Array(getItemsPagesCount()).keys()).map((page) => page + 1)\n\n        const paginPages = []\n\n        for (let i = 0; i < Math.ceil(ofCount.length / paginationSize); i++) {\n            paginPages[i] = ofCount.slice(i * paginationSize, i * paginationSize + paginationSize)\n        }\n\n        state._pagingPages = paginPages\n    }\n\n    generatePagingPages()\n\n    const onPagingUpdateCallback = () => {\n        if (Guards.isFunc(onPagingUpdate)) {\n            onPagingUpdate(state)\n        }\n    }\n\n    const getPaginationPagesCount = () => {\n        return state._pagingPages.length\n    }\n\n    const getIsFirstPaginationPage = () => {\n        return state._pagingPage === 1\n    }\n    const getIsLastPaginationPage = () => {\n        return state._pagingPage === getPaginationPagesCount()\n    }\n    const getIsFirstItemsPage = () => {\n        return state.page === 1\n    }\n    const getIsLastItemsPage = () => {\n        return state.page === getItemsPagesCount()\n    }\n\n    const updatePaginationPage = (pagingPage: number) => {\n        const count = getPaginationPagesCount()\n        const canUpdate = pagingPage >= 1 && count >= pagingPage\n        if (canUpdate) {\n            state._pagingPage = pagingPage\n            state.pages = state._pagingPages[state._pagingPage - 1]\n            state.isFirstPagingPage = getIsFirstPaginationPage()\n            state.isLastPagingPage = getIsLastPaginationPage()\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPaginationPage = () => {\n        updatePaginationPage(state._pagingPage + 1)\n    }\n\n    const prevPaginationPage = () => {\n        updatePaginationPage(state._pagingPage - 1)\n    }\n\n    const updatePage = (page: number) => {\n        const count = getItemsPagesCount()\n        const canUpdate = page >= 1 && count >= page\n\n        if (canUpdate) {\n            state.page = page\n            state.isFirstPage = getIsFirstItemsPage()\n            state.isLastPage = getIsLastItemsPage()\n            if (!state.pages.includes(page)) {\n                const pagesIndex = state._pagingPages.findIndex((x) => x.includes(state.page))\n                state._pagingPage = pagesIndex + 1\n                state.pages = state._pagingPages[pagesIndex]\n                state.isFirstPagingPage = getIsFirstPaginationPage()\n                state.isLastPagingPage = getIsLastPaginationPage()\n            }\n        }\n        onPagingUpdateCallback()\n    }\n\n    const nextPage = () => {\n        updatePage(state.page + 1)\n    }\n\n    const prevPage = () => {\n        updatePage(state.page - 1)\n    }\n\n    updatePage(page)\n\n    onPagingUpdateCallback()\n\n    return {\n        updatePage,\n        nextPage,\n        prevPage,\n        nextPaginationPage,\n        prevPaginationPage,\n    }\n}\n"]}