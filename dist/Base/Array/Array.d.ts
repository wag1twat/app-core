import { ArrayOf, Path } from '../types';
import { CollectionPagingOptions } from './CollectionPaging';
import { SortOptions } from './CollectionSort';
export declare function $Array<T extends any[]>(collection: T): {
    sort: <P extends Path<ArrayOf<T>>>(options: SortOptions<T, P>) => import("./CollectionSort/types").PublicSortMethods<T>;
    paging: (options: CollectionPagingOptions<T>) => import("./CollectionPaging/CollectionPaging").CollectionPaging<T>;
    groupBy: <P_1 extends Path<ArrayOf<T>>>(key: P_1) => {
        map: Map<P_1 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_1 ? T_1 extends R ? T_1 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_2 ? T_2 extends R ? T_2 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_3 ? T_3 extends R ? T_3 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_4 ? T_4 extends R ? T_4 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_5 ? T_5 extends R ? T_5 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_6 ? T_6 extends R ? T_6 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_7 ? T_7 extends R ? T_7 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_8 ? T_8 extends R ? T_8 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_9 ? T_9 extends R ? T_9 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_10 ? T_10 extends R ? T_10 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? any : never : K extends `${number}` ? never : never : T_10 extends string | number | symbol ? any : T_10 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_9 extends string | number | symbol ? any : T_9 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_8 extends string | number | symbol ? any : T_8 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_7 extends string | number | symbol ? any : T_7 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_6 extends string | number | symbol ? any : T_6 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_5 extends string | number | symbol ? any : T_5 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_4 extends string | number | symbol ? any : T_4 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_3 extends string | number | symbol ? any : T_3 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_2 extends string | number | symbol ? any : T_2 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_1 extends string | number | symbol ? any : T_1 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : P_1 extends string | number | symbol ? any : P_1 extends `${number}` ? unknown : never, any[]>;
        values: any[][];
        entries: [P_1 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_1 ? T_1 extends R ? T_1 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_2 ? T_2 extends R ? T_2 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_3 ? T_3 extends R ? T_3 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_4 ? T_4 extends R ? T_4 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_5 ? T_5 extends R ? T_5 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_6 ? T_6 extends R ? T_6 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_7 ? T_7 extends R ? T_7 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_8 ? T_8 extends R ? T_8 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_9 ? T_9 extends R ? T_9 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? R extends infer T_10 ? T_10 extends R ? T_10 extends `${infer K}.${infer R}` ? K extends string | number | symbol ? R extends string ? any : never : K extends `${number}` ? never : never : T_10 extends string | number | symbol ? any : T_10 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_9 extends string | number | symbol ? any : T_9 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_8 extends string | number | symbol ? any : T_8 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_7 extends string | number | symbol ? any : T_7 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_6 extends string | number | symbol ? any : T_6 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_5 extends string | number | symbol ? any : T_5 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_4 extends string | number | symbol ? any : T_4 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_3 extends string | number | symbol ? any : T_3 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_2 extends string | number | symbol ? any : T_2 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : T_1 extends string | number | symbol ? any : T_1 extends `${number}` ? unknown : never : never : never : never : K extends `${number}` ? never : never : P_1 extends string | number | symbol ? any : P_1 extends `${number}` ? unknown : never, any[]][];
    };
};
