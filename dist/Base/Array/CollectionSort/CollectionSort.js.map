{"version":3,"sources":["Base/Array/CollectionSort/CollectionSort.js","../src/Base/Array/CollectionSort/CollectionSort.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","collectionSort","Guards_1","require","get_xpath_1","get_compare_function_1","CollectionSort","defaultOrder","defaultOrders","state","setState","getDefaultCollection","cleanup","haveBeenInitialize","constructor","collection","options","onSortUpdate","field","order","this","orders","onMount","bind","nextState","Guards","isFunc","getValue","update","setField","setOrder","isBoolean","isUndefined","lastOrderIndex","nextOrderIndex","length","indexOf","item","isString","default","isObject","handler","xpath","slice","sort","l","r"],"mappings":"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","file":"CollectionSort.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.collectionSort = void 0;\nconst Guards_1 = require(\"../../../Guards\");\nconst get_xpath_1 = __importDefault(require(\"../../Object/get-xpath\"));\nconst get_compare_function_1 = __importDefault(require(\"./get-compare-function\"));\nclass CollectionSort {\n    defaultOrder = 'ASC';\n    defaultOrders = ['ASC', 'DESC', 'default'];\n    state;\n    setState;\n    getDefaultCollection;\n    cleanup;\n    haveBeenInitialize = false;\n    constructor(collection, options) {\n        const { onSortUpdate, field, order = this.defaultOrder, orders = this.defaultOrders, onMount, } = options;\n        this.state = {\n            collection,\n            order,\n            orders,\n            field,\n        };\n        this.cleanup = () => {\n            // this.setState({\n            //     collection,\n            //     order,\n            //     orders,\n            //     field\n            // })\n        };\n        this.cleanup = this.cleanup.bind(this);\n        this.getDefaultCollection = () => collection;\n        this.getDefaultCollection = this.getDefaultCollection.bind(this);\n        this.setState = function (nextState) {\n            this.state = { ...this.state, ...nextState };\n            if (Guards_1.Guards.isFunc(onSortUpdate)) {\n                onSortUpdate(this.state);\n            }\n        };\n        this.setState = this.setState.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n        this.setField = this.setField.bind(this);\n        this.setOrder = this.setOrder.bind(this);\n        if (Guards_1.Guards.isBoolean(onMount)) {\n            if (onMount && !this.haveBeenInitialize) {\n                this.update();\n                this.haveBeenInitialize = true;\n            }\n        }\n        else if (!this.haveBeenInitialize) {\n            this.update();\n            this.haveBeenInitialize = true;\n        }\n    }\n    setField = (field) => {\n        if (!Guards_1.Guards.isUndefined(field)) {\n            this.setState({ field });\n        }\n    };\n    setOrder = () => {\n        const canUpdate = this.haveBeenInitialize;\n        if (canUpdate) {\n            const lastOrderIndex = this.state.orders.length - 1;\n            const currentOrderIndex = this.state.orders.indexOf(this.state.order);\n            const nextOrderIndex = currentOrderIndex + 1;\n            this.setState({\n                order: nextOrderIndex <= lastOrderIndex\n                    ? this.state.orders[nextOrderIndex]\n                    : this.state.orders[0],\n            });\n        }\n    };\n    getValue(item) {\n        if (Guards_1.Guards.isString(this.state.field)) {\n            return (0, get_xpath_1.default)(item)(this.state.field);\n        }\n        if (Guards_1.Guards.isObject(this.state.field)) {\n            return this.state.field.handler((0, get_xpath_1.default)(item)(this.state.field.xpath));\n        }\n        return item;\n    }\n    update(options = {}) {\n        const { field } = options;\n        this.setOrder();\n        this.setField(field);\n        if (this.state.order === 'default') {\n            this.setState({\n                collection: this.getDefaultCollection().slice(),\n            });\n        }\n        else {\n            this.setState({\n                collection: this.state.collection.slice().sort((l, r) => (0, get_compare_function_1.default)(this.state.order, this.getValue(l), this.getValue(r))),\n            });\n        }\n    }\n}\nconst collectionSort = (collection, options) => new CollectionSort(collection, options);\nexports.collectionSort = collectionSort;\n","import { ArrayOf, JSONPath } from '../../types'\nimport { Guards } from '../../../Guards'\nimport getXPath from '../../Object/get-xpath'\nimport getCompareFunction from './get-compare-function'\nimport {\n    PublicSortMethods,\n    SortField,\n    SortOptions,\n    SortOrder,\n    SortState,\n    SortUpdateOptions,\n} from './types'\n\nclass CollectionSort<T extends any[], XPath extends JSONPath<ArrayOf<T>>>\n    implements PublicSortMethods<T>\n{\n    private defaultOrder: SortOrder = 'ASC'\n    private defaultOrders: SortOrder[] = ['ASC', 'DESC', 'default']\n    private state: SortState<T>\n    private setState: (nextState: Partial<SortState<T>>) => void\n    private getDefaultCollection: () => T\n    public cleanup: () => void\n    private haveBeenInitialize: boolean = false\n    constructor(collection: T, options: SortOptions<T, XPath>) {\n        const {\n            onSortUpdate,\n            field,\n            order = this.defaultOrder,\n            orders = this.defaultOrders,\n            onMount,\n        } = options\n\n        this.state = {\n            collection,\n            order,\n            orders,\n            field,\n        }\n\n        this.cleanup = () => {\n            // this.setState({\n            //     collection,\n            //     order,\n            //     orders,\n            //     field\n            // })\n        }\n        this.cleanup = this.cleanup.bind(this)\n        this.getDefaultCollection = () => collection\n        this.getDefaultCollection = this.getDefaultCollection.bind(this)\n\n        this.setState = function (nextState: Partial<SortState<T>>) {\n            this.state = { ...this.state, ...nextState }\n\n            if (Guards.isFunc(onSortUpdate)) {\n                onSortUpdate(this.state)\n            }\n        }\n        this.setState = this.setState.bind(this)\n        this.getValue = this.getValue.bind(this)\n        this.update = this.update.bind(this)\n        this.setField = this.setField.bind(this)\n        this.setOrder = this.setOrder.bind(this)\n\n        if (Guards.isBoolean(onMount)) {\n            if (onMount && !this.haveBeenInitialize) {\n                this.update()\n                this.haveBeenInitialize = true\n            }\n        } else if (!this.haveBeenInitialize) {\n            this.update()\n            this.haveBeenInitialize = true\n        }\n    }\n\n    private setField = <XPath extends JSONPath<ArrayOf<T>>>(\n        field: SortField<T, XPath> | undefined\n    ) => {\n        if (!Guards.isUndefined(field)) {\n            this.setState({ field })\n        }\n    }\n\n    private setOrder = () => {\n        const canUpdate = this.haveBeenInitialize\n\n        if (canUpdate) {\n            const lastOrderIndex = this.state.orders.length - 1\n            const currentOrderIndex = this.state.orders.indexOf(this.state.order)\n            const nextOrderIndex = currentOrderIndex + 1\n            this.setState({\n                order:\n                    nextOrderIndex <= lastOrderIndex\n                        ? this.state.orders[nextOrderIndex]\n                        : this.state.orders[0],\n            })\n        }\n    }\n\n    private getValue(item: ArrayOf<T>) {\n        if (Guards.isString(this.state.field)) {\n            return getXPath(item)(this.state.field)\n        }\n        if (Guards.isObject(this.state.field)) {\n            return this.state.field.handler(getXPath(item)(this.state.field.xpath))\n        }\n        return item\n    }\n\n    public update<XPath extends JSONPath<ArrayOf<T>>>(options: SortUpdateOptions<T, XPath> = {}) {\n        const { field } = options\n\n        this.setOrder()\n\n        this.setField(field)\n\n        if (this.state.order === 'default') {\n            this.setState({\n                collection: this.getDefaultCollection().slice() as T,\n            })\n        } else {\n            this.setState({\n                collection: (this.state.collection.slice() as T).sort((l, r) =>\n                    getCompareFunction(\n                        this.state.order as Exclude<SortOrder, 'default'>,\n                        this.getValue(l),\n                        this.getValue(r)\n                    )\n                ),\n            })\n        }\n    }\n}\n\nconst collectionSort = <T extends any[], XPath extends JSONPath<ArrayOf<T>>>(\n    collection: T,\n    options: SortOptions<T, XPath>\n): PublicSortMethods<T> => new CollectionSort(collection, options)\n\nexport { collectionSort }\n"]}