{"version":3,"sources":["Base/String/replace-all.js","../src/Base/String/replace-all.ts"],"names":["Object","defineProperty","exports","value","Object_1","require","split_1","replaceAll","string","separator","properties","result","parts","split","let","i","length","property","$Object","get","push","join"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,WAAc,KAAA,ECArB,MAAAG,SAAAC,QAAA,WAAA,EACAC,QAAAD,QAAA,SAAA,EAGME,WACiBC,GACnB,CACIC,EACAC,KAEA,IAAMC,EAAS,GAETC,GAAQ,EAAAN,QAAAO,OAAML,CAAM,EAAEC,CAAS,EAErC,IAAKK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,CAAC,GAAI,CACnC,IAAME,GAAW,EAAAb,SAAAc,SAAWR,CAAU,EAAES,IAAIP,EAAMG,EAAa,GAE3D,EAAAX,SAAAc,SAAWR,CAAU,EAAES,IAAIP,EAAMG,EAAa,EAC9CJ,EAAOS,KAAKH,CAAQ,EAEpBN,EAAOS,KAAKR,EAAMG,EAAE,CDLhC,CCSI,OAAOJ,EAAOU,KAAKZ,CAAS,CAChC,EAEKP,QAAAK,WAAAA","file":"replace-all.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceAll = void 0;\nconst Object_1 = require(\"../Object\");\nconst split_1 = require(\"./split\");\nconst replaceAll = (string) => (separator, properties) => {\n    const result = [];\n    const parts = (0, split_1.split)(string)(separator);\n    for (let i = 0; i < parts.length; i++) {\n        const property = (0, Object_1.$Object)(properties).get(parts[i]);\n        if ((0, Object_1.$Object)(properties).get(parts[i])) {\n            result.push(property);\n        }\n        else {\n            result.push(parts[i]);\n        }\n    }\n    return result.join(separator);\n};\nexports.replaceAll = replaceAll;\n","import { ReplaceAll } from '../types/utils'\nimport { $Object } from '../Object'\nimport { split } from './split'\nimport { Path } from 'Base/types'\n\nconst replaceAll =\n    <S extends string>(string: S) =>\n    <P extends { [x: string]: any }, Separator extends string = string>(\n        separator: Separator,\n        properties: P\n    ): ReplaceAll<S, P> => {\n        const result = []\n\n        const parts = split(string)(separator)\n\n        for (let i = 0; i < parts.length; i++) {\n            const property = $Object<P>(properties).get(parts[i] as Path<P>)\n\n            if ($Object<P>(properties).get(parts[i] as Path<P>)) {\n                result.push(property)\n            } else {\n                result.push(parts[i])\n            }\n        }\n\n        return result.join(separator) as ReplaceAll<S, P>\n    }\n\nexport { replaceAll }\n"]}