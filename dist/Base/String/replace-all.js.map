{"version":3,"sources":["Base/String/replace-all.js","../src/Base/String/replace-all.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","Object_1","require","split_1","replaceAll","string","separator","properties","result","parts","default","let","i","length","property","$Object","get","push","join","exports"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,ECDxD,MAAAI,SAAAC,QAAA,WAAA,EACAC,QAAAP,gBAAAM,QAAA,SAAA,CAAA,EAEME,WACiBC,GACnB,CACIC,EACAC,KAEA,IAAMC,EAAS,GAETC,GAAQ,EAAAN,QAAAO,SAAML,CAAM,EAAEC,CAAS,EAErC,IAAKK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,CAAC,GAAI,CACnC,IAAME,GAAW,EAAAb,SAAAc,SAAWR,CAAU,EAAES,IAAIP,EAAMG,EAAE,GAEhD,EAAAX,SAAAc,SAAWR,CAAU,EAAES,IAAIP,EAAMG,EAAE,EACnCJ,EAAOS,KAAKH,CAAQ,EAEpBN,EAAOS,KAAKR,EAAMG,EAAE,CDFhC,CCMI,OAAOJ,EAAOU,KAAKZ,CAAS,CAChC,EAEJa,QAAAT,QAAeN","file":"replace-all.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Object_1 = require(\"../Object\");\nconst split_1 = __importDefault(require(\"./split\"));\nconst replaceAll = (string) => (separator, properties) => {\n    const result = [];\n    const parts = (0, split_1.default)(string)(separator);\n    for (let i = 0; i < parts.length; i++) {\n        const property = (0, Object_1.$Object)(properties).get(parts[i]);\n        if ((0, Object_1.$Object)(properties).get(parts[i])) {\n            result.push(property);\n        }\n        else {\n            result.push(parts[i]);\n        }\n    }\n    return result.join(separator);\n};\nexports.default = replaceAll;\n","import { Types } from '../Types'\nimport { $Object } from '../Object'\nimport split from './split'\n\nconst replaceAll =\n    <S extends string>(string: S) =>\n    <P extends { [x: string]: any }, Separator extends string = string>(\n        separator: Separator,\n        properties: P\n    ): Types.String.ReplaceAll<S, P> => {\n        const result = []\n\n        const parts = split(string)(separator)\n\n        for (let i = 0; i < parts.length; i++) {\n            const property = $Object<P>(properties).get(parts[i])\n\n            if ($Object<P>(properties).get(parts[i])) {\n                result.push(property)\n            } else {\n                result.push(parts[i])\n            }\n        }\n\n        return result.join(separator) as Types.String.ReplaceAll<S, P>\n    }\n\nexport default replaceAll\n"]}