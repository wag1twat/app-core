{"version":3,"sources":["Base/Object/to-queries/to-queries.js","../src/Base/Object/to-queries/to-queries.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","toQueries","rules_1","require","Guards_1","get_1","constants_1","obj","options","defaultToQueriesOptions","prefix","key","skipNull","skipUndefined","let","result","pre","post","value","default","Guards","isNull","isUndefined","accsessor","isArrayConstructor","toQueriesAccsessors","arrayAccsessor","isObjectConstructor","objectAccsessor","isObject","push","encodeURIComponent","filter","noEmptyString","concat","apply","length","join"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAGxDI,QAH6DC,UAAA,KAAA,ECF7D,MAAAC,QAAAC,QAAA,aAAA,EACAC,SAAAD,QAAA,iBAAA,EACAE,MAAAV,gBAAAQ,QAAA,QAAA,CAAA,EAEAG,YAAAH,QAAA,aAAA,EAEMF,UACiBM,GACnB,CAACC,EAAqCF,YAAAG,wBAAyBC,KAC3D,IAISC,EAJH,CAAEC,SAAAA,EAAUC,cAAAA,CAAa,EAAKL,EAEpCM,IAAIC,EAAmB,GAEvB,IAASJ,KAAOJ,EAAK,CACjB,IAiBWS,EAAKC,EAjBVC,GAAQ,EAAAb,MAAAc,SAAIZ,CAAG,EAAEI,CAAG,EAE1B,IAAiB,CAAA,IAAbC,GAAqBR,CAAAA,SAAAgB,OAAOC,OAAOH,CAAK,KAEf,CAAA,IAAlBL,GAA0BT,CAAAA,SAAAgB,OAAOE,YAAYJ,CAAK,GAAtD,CAIPJ,IAAIS,EAAoBZ,EAEpBP,SAAAgB,OAAOI,mBAAmBjB,CAAG,GACvB,CAACS,EAAKC,GACRX,YAAAmB,oBACIjB,EAAQkB,gBAAkBpB,YAAAG,wBAAwBiB,gBAE1DH,EAAY,GAAGb,EAASM,EAAMC,GACvBb,SAAAgB,OAAOO,oBAAoBpB,CAAG,IAC/B,CAACS,EAAKC,GACRX,YAAAmB,oBACIjB,EAAQoB,iBAAmBtB,YAAAG,wBAAwBmB,iBAE3DL,EAAYb,EAAS,GAAGA,EAASM,EAAMO,EAAYN,EAASM,GAG5DnB,SAAAgB,OAAOS,SAASX,CAAK,EACrBH,EAAOe,KAAK7B,UAAUiB,CAAK,EAAEV,EAASe,CAAS,CAAC,EAEhDR,EAAOe,KAAQP,EAAH,IAAgBQ,mBAAmB,GAAGb,CAAO,CAAG,CA9BhEH,CA2BA,CAWJ,OAJAA,EAASA,EAAOiB,OAAO9B,QAAA+B,aAAa,GAEpClB,EAAU,GAAgBmB,OAAOC,MAAM,GAAgBpB,CAAM,GAE/CqB,OAASrB,EAAOsB,KAAK,GAAG,EAAI,EAC9C,EAEKrC,QAAAC,UAAAA","file":"to-queries.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toQueries = void 0;\nconst rules_1 = require(\"../../rules\");\nconst Guards_1 = require(\"../../../Guards\");\nconst get_1 = __importDefault(require(\"../get\"));\nconst constants_1 = require(\"./constants\");\nconst toQueries = (obj) => (options = constants_1.defaultToQueriesOptions, prefix) => {\n    const { skipNull, skipUndefined } = options;\n    let result = [];\n    for (let key in obj) {\n        const value = (0, get_1.default)(obj)(key);\n        if (skipNull === true && Guards_1.Guards.isNull(value)) {\n            continue;\n        }\n        else if (skipUndefined === true && Guards_1.Guards.isUndefined(value)) {\n            continue;\n        }\n        let accsessor = key;\n        if (Guards_1.Guards.isArrayConstructor(obj)) {\n            const [pre, post] = constants_1.toQueriesAccsessors[options.arrayAccsessor || constants_1.defaultToQueriesOptions.arrayAccsessor];\n            accsessor = `${prefix}${pre}${post}`;\n        }\n        else if (Guards_1.Guards.isObjectConstructor(obj)) {\n            const [pre, post] = constants_1.toQueriesAccsessors[options.objectAccsessor || constants_1.defaultToQueriesOptions.objectAccsessor];\n            accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor;\n        }\n        if (Guards_1.Guards.isObject(value)) {\n            result.push(toQueries(value)(options, accsessor));\n        }\n        else {\n            result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`);\n        }\n    }\n    result = result.filter(rules_1.noEmptyString);\n    result = [].concat.apply([], result);\n    return result.length ? result.join('&') : '';\n};\nexports.toQueries = toQueries;\n","import { noEmptyString } from '../../rules'\nimport { Guards } from '../../../Guards'\nimport get from '../get'\nimport { ToQueriesOptions } from './types'\nimport { defaultToQueriesOptions, toQueriesAccsessors } from './constants'\n\nconst toQueries =\n    <O extends object>(obj: O) =>\n    (options: Partial<ToQueriesOptions> = defaultToQueriesOptions, prefix?: string): string => {\n        const { skipNull, skipUndefined } = options\n\n        let result: string[] = []\n\n        for (let key in obj) {\n            const value = get(obj)(key)\n\n            if (skipNull === true && Guards.isNull(value)) {\n                continue\n            } else if (skipUndefined === true && Guards.isUndefined(value)) {\n                continue\n            }\n\n            let accsessor: string = key\n\n            if (Guards.isArrayConstructor(obj)) {\n                const [pre, post] =\n                    toQueriesAccsessors[\n                        options.arrayAccsessor || defaultToQueriesOptions.arrayAccsessor\n                    ]\n                accsessor = `${prefix}${pre}${post}`\n            } else if (Guards.isObjectConstructor(obj)) {\n                const [pre, post] =\n                    toQueriesAccsessors[\n                        options.objectAccsessor || defaultToQueriesOptions.objectAccsessor\n                    ]\n                accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor\n            }\n\n            if (Guards.isObject(value)) {\n                result.push(toQueries(value)(options, accsessor))\n            } else {\n                result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`)\n            }\n        }\n\n        result = result.filter(noEmptyString)\n\n        result = ([] as string[]).concat.apply([] as string[], result)\n\n        return result.length ? result.join('&') : ''\n    }\n\nexport { toQueries }\n"]}