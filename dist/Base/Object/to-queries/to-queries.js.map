{"version":3,"sources":["Base/Object/to-queries/to-queries.js","../src/Base/Object/to-queries/to-queries.ts"],"names":["Object","defineProperty","exports","value","rules_1","require","Guards_1","constants_1","Object_1","toQueries","obj","options","defaultToQueriesOptions","prefix","key","skipNull","skipUndefined","let","result","hasOwnProperty","pre","post","$Object","get","Guards","isNull","isUndefined","accsessor","isArrayConstructor","toQueriesAccsessors","arrayAccsessor","isObjectConstructor","objectAccsessor","isObject","push","encodeURIComponent","filter","noEmptyString","concat","apply","length","join"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,UAAAA,KAAAA,ECDP,MAAAG,QAAAC,QAAA,aAAA,EACAC,SAAAD,QAAA,iBAAA,EAEAE,YAAAF,QAAA,aAAA,EACAG,SAAAH,QAAA,WAAA,EAGMI,UACiBC,GACnB,CAACC,EAAqCJ,YAAAK,wBAAyBC,KAC3D,IAISC,EAJH,CAAEC,SAAAA,EAAUC,cAAAA,CAAa,EAAKL,EAEpCM,IAAIC,EAAmB,GAEvB,IAASJ,KAAOJ,EACZ,GAAIA,EAAIS,eAAeL,CAAG,EAA1B,CACI,IAiBWM,EAAKC,EAjBVlB,GAAQ,EAAAK,SAAAc,SAAQZ,CAAG,EAAEa,IAAIT,CAAyB,EAExD,GAAIC,EAAa,CAAA,IAAbA,GAAqBT,SAAAkB,OAAOC,OAAOtB,CAAK,GAEf,CAAA,IAAlBa,GAA0BV,SAAAkB,OAAOE,YAAYvB,CAAK,GAAtD,CAIPc,IAAIU,EAAoBb,EAEpBR,SAAAkB,OAAOI,mBAAmBlB,CAAG,GACvB,CAACU,EAAKC,GACRd,YAAAsB,oBACIlB,EAAQmB,gBAAkBvB,YAAAK,wBAAwBkB,gBAE1DH,EAAY,GAAGd,EAASO,EAAMC,GACvBf,SAAAkB,OAAOO,oBAAoBrB,CAAG,IAC/B,CAACU,EAAKC,GACRd,YAAAsB,oBACIlB,EAAQqB,iBAAmBzB,YAAAK,wBAAwBoB,iBAE3DL,EAAYd,EAAS,GAAGA,EAASO,EAAMO,EAAYN,EAASM,GAG5DrB,SAAAkB,OAAOS,SAAS9B,CAAK,EACrBe,EAAOgB,KAAKzB,UAAUN,CAAK,EAAEQ,EAASgB,CAAS,CAAC,EAEhDT,EAAOgB,KAAQP,EAAH,IAAgBQ,mBAAmB,GAAGhC,CAAO,CAAG,CA3B1DA,CA6BT,CASL,OAJAe,EAASA,EAAOkB,OAAOhC,QAAAiC,aAAa,GAEpCnB,EAAU,GAAgBoB,OAAOC,MAAM,GAAgBrB,CAAM,GAE/CsB,OAAStB,EAAOuB,KAAK,GAAG,EAAI,EAC9C,EAEKvC,QAAAO,UAAAA","file":"to-queries.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toQueries = void 0;\nconst rules_1 = require(\"../../rules\");\nconst Guards_1 = require(\"../../../Guards\");\nconst constants_1 = require(\"./constants\");\nconst Object_1 = require(\"../Object\");\nconst toQueries = (obj) => (options = constants_1.defaultToQueriesOptions, prefix) => {\n    const { skipNull, skipUndefined } = options;\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const value = (0, Object_1.$Object)(obj).get(key);\n            if (skipNull === true && Guards_1.Guards.isNull(value)) {\n                continue;\n            }\n            else if (skipUndefined === true && Guards_1.Guards.isUndefined(value)) {\n                continue;\n            }\n            let accsessor = key;\n            if (Guards_1.Guards.isArrayConstructor(obj)) {\n                const [pre, post] = constants_1.toQueriesAccsessors[options.arrayAccsessor || constants_1.defaultToQueriesOptions.arrayAccsessor];\n                accsessor = `${prefix}${pre}${post}`;\n            }\n            else if (Guards_1.Guards.isObjectConstructor(obj)) {\n                const [pre, post] = constants_1.toQueriesAccsessors[options.objectAccsessor || constants_1.defaultToQueriesOptions.objectAccsessor];\n                accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor;\n            }\n            if (Guards_1.Guards.isObject(value)) {\n                result.push(toQueries(value)(options, accsessor));\n            }\n            else {\n                result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`);\n            }\n        }\n        else {\n            continue;\n        }\n    }\n    result = result.filter(rules_1.noEmptyString);\n    result = [].concat.apply([], result);\n    return result.length ? result.join('&') : '';\n};\nexports.toQueries = toQueries;\n","import { noEmptyString } from '../../rules'\nimport { Guards } from '../../../Guards'\nimport { ToQueriesOptions } from './types'\nimport { defaultToQueriesOptions, toQueriesAccsessors } from './constants'\nimport { $Object } from '../Object'\nimport { Path } from '../../types'\n\nconst toQueries =\n    <O extends object>(obj: O) =>\n    (options: Partial<ToQueriesOptions> = defaultToQueriesOptions, prefix?: string): string => {\n        const { skipNull, skipUndefined } = options\n\n        let result: string[] = []\n\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = $Object(obj).get(key as unknown as Path<O>)\n\n                if (skipNull === true && Guards.isNull(value)) {\n                    continue\n                } else if (skipUndefined === true && Guards.isUndefined(value)) {\n                    continue\n                }\n\n                let accsessor: string = key\n\n                if (Guards.isArrayConstructor(obj)) {\n                    const [pre, post] =\n                        toQueriesAccsessors[\n                            options.arrayAccsessor || defaultToQueriesOptions.arrayAccsessor\n                        ]\n                    accsessor = `${prefix}${pre}${post}`\n                } else if (Guards.isObjectConstructor(obj)) {\n                    const [pre, post] =\n                        toQueriesAccsessors[\n                            options.objectAccsessor || defaultToQueriesOptions.objectAccsessor\n                        ]\n                    accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor\n                }\n\n                if (Guards.isObject(value)) {\n                    result.push(toQueries(value)(options, accsessor))\n                } else {\n                    result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`)\n                }\n            } else {\n                continue\n            }\n        }\n\n        result = result.filter(noEmptyString)\n\n        result = ([] as string[]).concat.apply([] as string[], result)\n\n        return result.length ? result.join('&') : ''\n    }\n\nexport { toQueries }\n"]}