{"version":3,"sources":["Base/Object/to-queries.js","../src/Base/Object/to-queries.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","rules_1","require","Types_1","Guards_1","get_1","toQueries","obj","options","Types","defaultToQueriesOptions","prefix","key","skipNull","skipUndefined","let","result","pre","post","value","default","Guards","isNull","isUndefined","accsessor","isArrayConstructor","toQueriesAccsessors","arrayAccsessor","isObjectConstructor","objectAccsessor","isObject","push","encodeURIComponent","filter","nonEmptyString","concat","apply","length","join","exports"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,ECFxD,MAAAI,QAAAC,QAAA,UAAA,EACAC,QAAAD,QAAA,UAAA,EACAE,SAAAF,QAAA,cAAA,EACAG,MAAAT,gBAAAM,QAAA,OAAA,CAAA,EAEMI,UACiBC,GACnB,CACIC,EAAkDL,QAAAM,MAAMV,OAAOW,wBAC/DC,KAEA,IAISC,EAJH,CAAEC,SAAAA,EAAUC,cAAAA,CAAa,EAAKN,EAEpCO,IAAIC,EAAmB,GAEvB,IAASJ,KAAOL,EAAK,CACjB,IAkBWU,EAAKC,EAlBVC,GAAQ,EAAAd,MAAAe,SAAIb,CAAG,EAAEK,CAAG,EAE1B,IAAiB,CAAA,IAAbC,GAAqBT,CAAAA,SAAAiB,OAAOC,OAAOH,CAAK,KAEf,CAAA,IAAlBL,GAA0BV,CAAAA,SAAAiB,OAAOE,YAAYJ,CAAK,GAAtD,CAIPJ,IAAIS,EAAoBZ,EAEpBR,SAAAiB,OAAOI,mBAAmBlB,CAAG,GACvB,CAACU,EAAKC,GACRf,QAAAM,MAAMV,OAAO2B,oBACTlB,EAAQmB,gBACJxB,QAAAM,MAAMV,OAAOW,wBAAwBiB,gBAEjDH,EAAY,GAAGb,EAASM,EAAMC,GACvBd,SAAAiB,OAAOO,oBAAoBrB,CAAG,IAC/B,CAACU,EAAKC,GACRf,QAAAM,MAAMV,OAAO2B,oBACTlB,EAAQqB,iBACJ1B,QAAAM,MAAMV,OAAOW,wBAAwBmB,iBAEjDL,EAAYb,EAAS,GAAGA,EAASM,EAAMO,EAAYN,EAASM,GAG5DpB,SAAAiB,OAAOS,SAASX,CAAK,EACrBH,EAAOe,KAAKzB,UAAUa,CAAK,EAAEX,EAASgB,CAAS,CAAC,EAEhDR,EAAOe,KAAQP,EAAH,IAAgBQ,mBAAmB,GAAGb,CAAO,CAAG,CAhChEH,CDoBJ,CCoBA,OAJAA,EAASA,EAAOiB,OAAOhC,QAAAiC,cAAc,GAErClB,EAAU,GAAgBmB,OAAOC,MAAM,GAAgBpB,CAAM,GAE/CqB,OAASrB,EAAOsB,KAAK,GAAG,EAAI,EAC9C,EAEJC,QAAAnB,QAAed","file":"to-queries.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rules_1 = require(\"../rules\");\nconst Types_1 = require(\"../Types\");\nconst Guards_1 = require(\"../../Guards\");\nconst get_1 = __importDefault(require(\"./get\"));\nconst toQueries = (obj) => (options = Types_1.Types.Object.defaultToQueriesOptions, prefix) => {\n    const { skipNull, skipUndefined } = options;\n    let result = [];\n    for (let key in obj) {\n        const value = (0, get_1.default)(obj)(key);\n        if (skipNull === true && Guards_1.Guards.isNull(value)) {\n            continue;\n        }\n        else if (skipUndefined === true && Guards_1.Guards.isUndefined(value)) {\n            continue;\n        }\n        let accsessor = key;\n        if (Guards_1.Guards.isArrayConstructor(obj)) {\n            const [pre, post] = Types_1.Types.Object.toQueriesAccsessors[options.arrayAccsessor ||\n                Types_1.Types.Object.defaultToQueriesOptions.arrayAccsessor];\n            accsessor = `${prefix}${pre}${post}`;\n        }\n        else if (Guards_1.Guards.isObjectConstructor(obj)) {\n            const [pre, post] = Types_1.Types.Object.toQueriesAccsessors[options.objectAccsessor ||\n                Types_1.Types.Object.defaultToQueriesOptions.objectAccsessor];\n            accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor;\n        }\n        if (Guards_1.Guards.isObject(value)) {\n            result.push(toQueries(value)(options, accsessor));\n        }\n        else {\n            result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`);\n        }\n    }\n    result = result.filter(rules_1.nonEmptyString);\n    result = [].concat.apply([], result);\n    return result.length ? result.join('&') : '';\n};\nexports.default = toQueries;\n","import { nonEmptyString } from '../rules'\nimport { Types } from '../Types'\nimport { Guards } from '../../Guards'\nimport get from './get'\n\nconst toQueries =\n    <O extends object>(obj: O) =>\n    (\n        options: Partial<Types.Object.ToQueriesOptions> = Types.Object.defaultToQueriesOptions,\n        prefix?: string\n    ): string => {\n        const { skipNull, skipUndefined } = options\n\n        let result: string[] = []\n\n        for (let key in obj) {\n            const value = get(obj)(key)\n\n            if (skipNull === true && Guards.isNull(value)) {\n                continue\n            } else if (skipUndefined === true && Guards.isUndefined(value)) {\n                continue\n            }\n\n            let accsessor: string = key\n\n            if (Guards.isArrayConstructor(obj)) {\n                const [pre, post] =\n                    Types.Object.toQueriesAccsessors[\n                        options.arrayAccsessor ||\n                            Types.Object.defaultToQueriesOptions.arrayAccsessor\n                    ]\n                accsessor = `${prefix}${pre}${post}`\n            } else if (Guards.isObjectConstructor(obj)) {\n                const [pre, post] =\n                    Types.Object.toQueriesAccsessors[\n                        options.objectAccsessor ||\n                            Types.Object.defaultToQueriesOptions.objectAccsessor\n                    ]\n                accsessor = prefix ? `${prefix}${pre}${accsessor}${post}` : accsessor\n            }\n\n            if (Guards.isObject(value)) {\n                result.push(toQueries(value)(options, accsessor))\n            } else {\n                result.push(`${accsessor}=${encodeURIComponent(`${value}`)}`)\n            }\n        }\n\n        result = result.filter(nonEmptyString)\n\n        result = ([] as string[]).concat.apply([] as string[], result)\n\n        return result.length ? result.join('&') : ''\n    }\n\nexport default toQueries\n"]}