"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Base=void 0;const Guards_1=require("../Guards"),rules_1=require("./rules"),Types_1=require("./Types");var Base;!function(o){o.Object=function a(p){function d(e){return p[e]}return{get:d,toQueries:function(s=Types_1.Types.Object.defaultToQueriesOptions,r){var t,{skipNull:e,skipUndefined:u}=s;let n=[];for(t in p)if(p.hasOwnProperty(t)){var o,i,c=d(t);if(!(!0===e&&Guards_1.Guards.isNull(c)||!0===u&&Guards_1.Guards.isUndefined(c))){let e=t;Guards_1.Guards.isArrayConstructor(p)?([o,i]=Types_1.Types.Object.toQueriesAccsessors[s.arrayAccsessor||Types_1.Types.Object.defaultToQueriesOptions.arrayAccsessor],e=""+r+o+i):Guards_1.Guards.isObjectConstructor(p)&&([o,i]=Types_1.Types.Object.toQueriesAccsessors[s.objectAccsessor||Types_1.Types.Object.defaultToQueriesOptions.objectAccsessor],e=r?""+r+o+e+i:e),Guards_1.Guards.isTypeofObject(c)?n.push(a(c).toQueries(s,e)):n.push(e+"="+encodeURIComponent(""+c))}}return n=n.filter(rules_1.nonEmptyString),(n=[].concat.apply([],n)).length?n.join("&"):""}}},o.String=function(r){function s(){return-1!==(""+r).indexOf("?")}function n(e,s){return(""+r).split(e,s)}return{split:n,replaceAllSeparatedString:function(e,s){var r=[],t=n(e);for(let e=0;e<t.length;e++){var u=o.Object(s).get(t[e]);o.Object(s).get(t[e])?r.push(u):r.push(t[e])}return r.join(e)},hasQueryParams:s,joinQueryString:function(e){return s()?r+"&"+e:r+"?"+e}}}}(Base=Base||{}),exports.Base=Base;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
