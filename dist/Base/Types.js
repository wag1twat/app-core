"use strict";var Types;Object.defineProperty(exports,"__esModule",{value:!0}),exports.Types=void 0,function(e){var r;(r=e.Object||(e.Object={})).defaultToQueriesOptions={skipNull:!0,skipUndefined:!0,arrayAccsessor:"[]",objectAccsessor:"."},r.toQueriesAccsessors={".":[".",""],"[]":["[","]"],"{}":["{","}"]},(r=(r=e.Array||(e.Array={})).Sort||(r.Sort={})).defaultOrders=["ASC","DESC","default"],r.defaultOrder="default",r.compareStrings=function(e,r,o,s,t){return r&&o?e?t.localeCompare(s):s.localeCompare(t):e&&r?1:-1},r.compareNumbers=function(e,r,o,s,t){return r&&o?e?t<s?1:-1:s<t?1:-1:r||o?e&&r?1:-1:void 0},r.compareBooleans=function(e,r,o,s,t){return r&&o?e?t<s?1:-1:s<t?1:-1:r||o?e&&r?1:-1:void 0}}(Types=exports.Types||(exports.Types={}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhc2UvVHlwZXMuanMiLCIuLi9zcmMvQmFzZS9UeXBlcy50cyJdLCJuYW1lcyI6WyJUeXBlcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibGV0IiwiQXJyYXkiLCJkZWZhdWx0VG9RdWVyaWVzT3B0aW9ucyIsInNraXBOdWxsIiwic2tpcFVuZGVmaW5lZCIsImFycmF5QWNjc2Vzc29yIiwib2JqZWN0QWNjc2Vzc29yIiwidG9RdWVyaWVzQWNjc2Vzc29ycyIsIi4iLCJbXSIsInt9IiwiU29ydCIsImRlZmF1bHRPcmRlcnMiLCJkZWZhdWx0T3JkZXIiLCJjb21wYXJlU3RyaW5ncyIsImlzQXNjIiwiaXNMIiwiaXNSIiwibCIsInIiLCJsb2NhbGVDb21wYXJlIiwiY29tcGFyZU51bWJlcnMiLCJjb21wYXJlQm9vbGVhbnMiXSwibWFwcGluZ3MiOiJBQUFBLGFDQUEsSUFBaUJBLE1EQ2pCQyxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsTUFBTyxDQUFBLENBQUssQ0FBQyxFQUE1REgsUUFBT0MsTUFBQUEsS0FBQUEsRUNEUCxTQUFpQkYsR0FtRGJLLElBcUJpQkMsR0FyQkFMLEVBQUFELEVBQUFDLFNBQUFELEVBQUFDLE9BQU0sS0FRTk0sd0JBQTRDLENBQ3JEQyxTQUFVLENBQUEsRUFDVkMsY0FBZSxDQUFBLEVBQ2ZDLGVBQWdCLEtBQ2hCQyxnQkFBaUIsR0FGakJGLEVBS1NSLEVBQUFXLG9CQUFzQixDQUMvQkMsSUFBSyxDQUFDLElBQUssSUFDWEMsS0FBTSxDQUFDLElBQUssS0FDWkMsS0FBTSxDQUFDLElBQUssSUFGWixHQU9hQyxHQUZKVixFQUFBTixFQUFBTSxRQUFBTixFQUFBTSxNQUFLLEtBRURVLE9BQUFWLEVBQUFVLEtBQUksS0ErQkpDLGNBQXlCLENBQUMsTUFBTyxPQUFRLFdBRXpDRCxFQUFBRSxhQUFzQixVQUVuQkYsRUFBQUcsZUFBaEIsU0FDSUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQSxPQUFJSCxHQUFPQyxFQUNBRixFQUNBSSxFQUFhQyxjQUFjRixDQUFXLEVBQ3RDQSxFQUFhRSxjQUFjRCxDQUFXLEVBRXRDSixHQUFTQyxFQUFNLEVBQVUsQ0FBQyxDQUd6QyxFQUVnQkwsRUFBQVUsZUFBaEIsU0FDSU4sRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQSxPQUFJSCxHQUFPQyxFQUNBRixFQUNBSSxFQUFnQkQsRUFDYixFQUNBLENBQUMsRUFDWUEsRUFBaEJDLEVBQ0QsRUFDQSxDQUFDLEVBQ0FILEdBQU9DLEVBQ1BGLEdBQVNDLEVBQU0sRUFBVSxDQUFDLEVBRDlCLEtBQUEsQ0FJWCxFQUVnQkwsRUFBQVcsZ0JBQWhCLFNBQ0lQLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUEsT0FBSUgsR0FBT0MsRUFDQUYsRUFDQUksRUFBaUJELEVBQ2QsRUFDQSxDQUFDLEVBQ2FBLEVBQWpCQyxFQUNELEVBQ0EsQ0FBQyxFQUNBSCxHQUFPQyxFQUNQRixHQUFTQyxFQUFNLEVBQVUsQ0FBQyxFQUQ5QixLQUFBLENBSVgsQ0FHWCxFQXpLZ0JyQixNQUFBRyxRQUFBSCxRQUFBRyxRQUFBSCxNQUFLLEdBQUEiLCJmaWxlIjoiQmFzZS9UeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlcyA9IHZvaWQgMDtcbnZhciBUeXBlcztcbihmdW5jdGlvbiAoVHlwZXMpIHtcbiAgICBsZXQgT2JqZWN0O1xuICAgIChmdW5jdGlvbiAoT2JqZWN0KSB7XG4gICAgICAgIE9iamVjdC5kZWZhdWx0VG9RdWVyaWVzT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNraXBOdWxsOiB0cnVlLFxuICAgICAgICAgICAgc2tpcFVuZGVmaW5lZDogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5QWNjc2Vzc29yOiAnW10nLFxuICAgICAgICAgICAgb2JqZWN0QWNjc2Vzc29yOiAnLicsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC50b1F1ZXJpZXNBY2NzZXNzb3JzID0ge1xuICAgICAgICAgICAgJy4nOiBbJy4nLCAnJ10sXG4gICAgICAgICAgICAnW10nOiBbJ1snLCAnXSddLFxuICAgICAgICAgICAgJ3t9JzogWyd7JywgJ30nXSxcbiAgICAgICAgfTtcbiAgICB9KShPYmplY3QgPSBUeXBlcy5PYmplY3QgfHwgKFR5cGVzLk9iamVjdCA9IHt9KSk7XG4gICAgbGV0IEFycmF5O1xuICAgIChmdW5jdGlvbiAoQXJyYXkpIHtcbiAgICAgICAgbGV0IFNvcnQ7XG4gICAgICAgIChmdW5jdGlvbiAoU29ydCkge1xuICAgICAgICAgICAgU29ydC5kZWZhdWx0T3JkZXJzID0gWydBU0MnLCAnREVTQycsICdkZWZhdWx0J107XG4gICAgICAgICAgICBTb3J0LmRlZmF1bHRPcmRlciA9ICdkZWZhdWx0JztcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVTdHJpbmdzKGlzQXNjLCBpc0wsIGlzUiwgbCwgcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0wgJiYgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzY1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByLmxvY2FsZUNvbXBhcmUobClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbC5sb2NhbGVDb21wYXJlKHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNMIHx8ICFpc1IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXNjID8gKGlzTCA/IDEgOiAtMSkgOiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNvcnQuY29tcGFyZVN0cmluZ3MgPSBjb21wYXJlU3RyaW5ncztcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVOdW1iZXJzKGlzQXNjLCBpc0wsIGlzUiwgbCwgcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0wgJiYgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzY1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByIDwgbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogciA+IGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0wgfHwgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzYyA/IChpc0wgPyAxIDogLTEpIDogLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTb3J0LmNvbXBhcmVOdW1iZXJzID0gY29tcGFyZU51bWJlcnM7XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlQm9vbGVhbnMoaXNBc2MsIGlzTCwgaXNSLCBsLCByKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTCAmJiBpc1IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXNjXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHIgPCBsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByID4gbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzTCB8fCBpc1IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXNjID8gKGlzTCA/IDEgOiAtMSkgOiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNvcnQuY29tcGFyZUJvb2xlYW5zID0gY29tcGFyZUJvb2xlYW5zO1xuICAgICAgICB9KShTb3J0ID0gQXJyYXkuU29ydCB8fCAoQXJyYXkuU29ydCA9IHt9KSk7XG4gICAgfSkoQXJyYXkgPSBUeXBlcy5BcnJheSB8fCAoVHlwZXMuQXJyYXkgPSB7fSkpO1xufSkoVHlwZXMgPSBleHBvcnRzLlR5cGVzIHx8IChleHBvcnRzLlR5cGVzID0ge30pKTtcbiIsImV4cG9ydCBuYW1lc3BhY2UgVHlwZXMge1xuICAgIGV4cG9ydCBuYW1lc3BhY2UgVXRpbGl0eSB7XG4gICAgICAgIGV4cG9ydCB0eXBlIElzQW55PFQ+ID0gdW5rbm93biBleHRlbmRzIFQgJiBzdHJpbmcgPyB0cnVlIDogZmFsc2VcblxuICAgICAgICBleHBvcnQgdHlwZSBTdHJpbmdPck51bWJlciA9IHN0cmluZyB8IG51bWJlclxuXG4gICAgICAgIGV4cG9ydCB0eXBlIFByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJpZ2ludCB8IGJvb2xlYW4gfCB1bmRlZmluZWQgfCBzeW1ib2xcblxuICAgICAgICAvLyBUT0RPOiBhcnJheSBwYXRoXG4gICAgICAgIGV4cG9ydCB0eXBlIEpTT05QYXRoPFQsIFByZWZpeCA9ICcnPiA9IHtcbiAgICAgICAgICAgIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgUHJpbWl0aXZlIHwgQXJyYXk8YW55PlxuICAgICAgICAgICAgICAgID8gYCR7c3RyaW5nICYgUHJlZml4fSR7c3RyaW5nICYgS31gXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgIHwgYCR7c3RyaW5nICYgUHJlZml4fSR7c3RyaW5nICYgS31gXG4gICAgICAgICAgICAgICAgICAgICAgfCAoSXNBbnk8VFtLXT4gZXh0ZW5kcyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gSlNPTlBhdGg8VFtLXSwgYCR7c3RyaW5nICYgUHJlZml4fSR7c3RyaW5nICYgS30uYD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldmVyKVxuICAgICAgICB9W2tleW9mIFRdXG5cbiAgICAgICAgZXhwb3J0IHR5cGUgSlNPTkZpbmQ8XG4gICAgICAgICAgICBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PixcbiAgICAgICAgICAgIFBhdGggPSBKU09OUGF0aDxUPlxuICAgICAgICA+ID0gUGF0aCBleHRlbmRzIGtleW9mIFRcbiAgICAgICAgICAgID8gVFtQYXRoXVxuICAgICAgICAgICAgOiBQYXRoIGV4dGVuZHMgYCR7aW5mZXIgVXB9LiR7aW5mZXIgRG93bn1gXG4gICAgICAgICAgICA/IElzQW55PFRbVXBdPiBleHRlbmRzIGZhbHNlXG4gICAgICAgICAgICAgICAgPyBKU09ORmluZDxUW1VwXSwgRG93bj5cbiAgICAgICAgICAgICAgICA6IG5ldmVyXG4gICAgICAgICAgICA6IG5ldmVyXG4gICAgfVxuICAgIGV4cG9ydCBuYW1lc3BhY2UgU3RyaW5nIHtcbiAgICAgICAgZXhwb3J0IHR5cGUgU3BsaXQ8UyBleHRlbmRzIHN0cmluZywgRCBleHRlbmRzIHN0cmluZz4gPSBzdHJpbmcgZXh0ZW5kcyBTXG4gICAgICAgICAgICA/IHN0cmluZ1tdXG4gICAgICAgICAgICA6IFMgZXh0ZW5kcyAnJ1xuICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgOiBTIGV4dGVuZHMgYCR7aW5mZXIgVH0ke0R9JHtpbmZlciBVfWBcbiAgICAgICAgICAgID8gW1QsIC4uLlNwbGl0PFUsIEQ+XVxuICAgICAgICAgICAgOiBbU11cblxuICAgICAgICBleHBvcnQgdHlwZSBSZXBsYWNlQWxsPFxuICAgICAgICAgICAgVCBleHRlbmRzIHN0cmluZyxcbiAgICAgICAgICAgIE0gZXh0ZW5kcyB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSxcbiAgICAgICAgICAgIEEgZXh0ZW5kcyBzdHJpbmcgPSAnJ1xuICAgICAgICA+ID0gVCBleHRlbmRzIGAke0V4dHJhY3Q8a2V5b2YgTSwgc3RyaW5nPn0ke2luZmVyIFJ9YFxuICAgICAgICAgICAgPyBUIGV4dGVuZHMgYCR7aW5mZXIgS30ke1J9YFxuICAgICAgICAgICAgICAgID8gUmVwbGFjZUFsbDxSLCBNLCBgJHtBfSR7TVtFeHRyYWN0PEssIGtleW9mIE0+XX1gPlxuICAgICAgICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgICAgIDogVCBleHRlbmRzIGAke2luZmVyIEZ9JHtpbmZlciBSfWBcbiAgICAgICAgICAgID8gUmVwbGFjZUFsbDxSLCBNLCBgJHtBfSR7Rn1gPlxuICAgICAgICAgICAgOiBBXG4gICAgfVxuICAgIGV4cG9ydCBuYW1lc3BhY2UgT2JqZWN0IHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBUb1F1ZXJpZXNPcHRpb25zIHtcbiAgICAgICAgICAgIG9iamVjdEFjY3Nlc3NvcjogJy4nIHwgJ3t9JyB8ICdbXSdcbiAgICAgICAgICAgIGFycmF5QWNjc2Vzc29yOiAnLicgfCAne30nIHwgJ1tdJ1xuICAgICAgICAgICAgc2tpcFVuZGVmaW5lZDogYm9vbGVhblxuICAgICAgICAgICAgc2tpcE51bGw6IGJvb2xlYW5cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0VG9RdWVyaWVzT3B0aW9uczogVG9RdWVyaWVzT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNraXBOdWxsOiB0cnVlLFxuICAgICAgICAgICAgc2tpcFVuZGVmaW5lZDogdHJ1ZSxcbiAgICAgICAgICAgIGFycmF5QWNjc2Vzc29yOiAnW10nLFxuICAgICAgICAgICAgb2JqZWN0QWNjc2Vzc29yOiAnLicsXG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgY29uc3QgdG9RdWVyaWVzQWNjc2Vzc29ycyA9IHtcbiAgICAgICAgICAgICcuJzogWycuJywgJyddIGFzIGNvbnN0LFxuICAgICAgICAgICAgJ1tdJzogWydbJywgJ10nXSBhcyBjb25zdCxcbiAgICAgICAgICAgICd7fSc6IFsneycsICd9J10gYXMgY29uc3QsXG4gICAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBcnJheSB7XG4gICAgICAgIGV4cG9ydCB0eXBlIE9mPFQgZXh0ZW5kcyBhbnlbXT4gPSBUIGV4dGVuZHMgKGluZmVyIFUpW10gPyBVIDogbmV2ZXJcbiAgICAgICAgZXhwb3J0IG5hbWVzcGFjZSBTb3J0IHtcbiAgICAgICAgICAgIGV4cG9ydCB0eXBlIE9yZGVyID0gJ0FTQycgfCAnREVTQycgfCAnZGVmYXVsdCdcblxuICAgICAgICAgICAgZXhwb3J0IHR5cGUgRmllbGRPYmplY3Q8VCBleHRlbmRzIGFueVtdLCBYUGF0aCBleHRlbmRzIFV0aWxpdHkuSlNPTlBhdGg8T2Y8VD4+PiA9IHtcbiAgICAgICAgICAgICAgICB4cGF0aDogWFBhdGhcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAoaXRlbTogVXRpbGl0eS5KU09ORmluZDxPZjxUPiwgWFBhdGg+IHwgdW5kZWZpbmVkKSA9PiBVdGlsaXR5LlByaW1pdGl2ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBleHBvcnQgdHlwZSBGaWVsZDxUIGV4dGVuZHMgYW55W10sIFhQYXRoIGV4dGVuZHMgVXRpbGl0eS5KU09OUGF0aDxPZjxUPj4+ID1cbiAgICAgICAgICAgICAgICB8IFhQYXRoXG4gICAgICAgICAgICAgICAgfCBGaWVsZE9iamVjdDxULCBYUGF0aD5cblxuICAgICAgICAgICAgZXhwb3J0IHR5cGUgU3RhdGU8VCBleHRlbmRzIGFueVtdPiA9IHtcbiAgICAgICAgICAgICAgICBfY29sbGVjdGlvbjogVFxuICAgICAgICAgICAgICAgIF9vcmRlcjogT3JkZXJcbiAgICAgICAgICAgICAgICBfb3JkZXJzOiBPcmRlcltdXG4gICAgICAgICAgICAgICAgX2ZpZWxkPzogRmllbGQ8VCwgVXRpbGl0eS5KU09OUGF0aDxPZjxUPj4+XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV4cG9ydCB0eXBlIE9wdGlvbnM8VCBleHRlbmRzIGFueVtdLCBYUGF0aCBleHRlbmRzIFV0aWxpdHkuSlNPTlBhdGg8T2Y8VD4+PiA9IHtcbiAgICAgICAgICAgICAgICBmaWVsZD86IEZpZWxkPFQsIFhQYXRoPlxuICAgICAgICAgICAgICAgIG9yZGVyPzogT3JkZXJcbiAgICAgICAgICAgICAgICBvcmRlcnM/OiBPcmRlcltdXG4gICAgICAgICAgICAgICAgb25VcGRhdGU/OiAoc3RhdGU6IFN0YXRlPFQ+KSA9PiB2b2lkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV4cG9ydCB0eXBlIFVwZGF0ZU9wdGlvbnM8VCBleHRlbmRzIGFueVtdLCBYUGF0aCBleHRlbmRzIFV0aWxpdHkuSlNPTlBhdGg8T2Y8VD4+PiA9IHtcbiAgICAgICAgICAgICAgICBmaWVsZD86IEZpZWxkPFQsIFhQYXRoPlxuICAgICAgICAgICAgICAgIG5vVXBkYXRlT3JkZXJGYWxzeUVxdWFsWFBhdGg/OiBib29sZWFuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0T3JkZXJzOiBPcmRlcltdID0gWydBU0MnLCAnREVTQycsICdkZWZhdWx0J11cblxuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRPcmRlcjogT3JkZXIgPSAnZGVmYXVsdCdcblxuICAgICAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVTdHJpbmdzKFxuICAgICAgICAgICAgICAgIGlzQXNjOiBib29sZWFuLFxuICAgICAgICAgICAgICAgIGlzTDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBpc1I6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgbDogVXRpbGl0eS5QcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgcjogVXRpbGl0eS5QcmltaXRpdmVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmIChpc0wgJiYgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzY1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAociBhcyBzdHJpbmcpLmxvY2FsZUNvbXBhcmUobCBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChsIGFzIHN0cmluZykubG9jYWxlQ29tcGFyZShyIGFzIHN0cmluZylcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0wgfHwgIWlzUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBc2MgPyAoaXNMID8gMSA6IC0xKSA6IC0xXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVOdW1iZXJzKFxuICAgICAgICAgICAgICAgIGlzQXNjOiBib29sZWFuLFxuICAgICAgICAgICAgICAgIGlzTDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBpc1I6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgbDogVXRpbGl0eS5QcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgcjogVXRpbGl0eS5QcmltaXRpdmVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmIChpc0wgJiYgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzY1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAociBhcyBudW1iZXIpIDwgKGwgYXMgbnVtYmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKHIgYXMgbnVtYmVyKSA+IChsIGFzIG51bWJlcilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAtMVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMIHx8IGlzUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBc2MgPyAoaXNMID8gMSA6IC0xKSA6IC0xXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVCb29sZWFucyhcbiAgICAgICAgICAgICAgICBpc0FzYzogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBpc0w6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgaXNSOiBib29sZWFuLFxuICAgICAgICAgICAgICAgIGw6IFV0aWxpdHkuUHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgIHI6IFV0aWxpdHkuUHJpbWl0aXZlXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMICYmIGlzUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBc2NcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKHIgYXMgYm9vbGVhbikgPCAobCBhcyBib29sZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKHIgYXMgYm9vbGVhbikgPiAobCBhcyBib29sZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IC0xXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0wgfHwgaXNSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FzYyA/IChpc0wgPyAxIDogLTEpIDogLTFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
