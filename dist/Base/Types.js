"use strict";var Types;Object.defineProperty(exports,"__esModule",{value:!0}),exports.Types=void 0,function(e){var r;(r=e.Object||(e.Object={})).defaultToQueriesOptions={skipNull:!0,skipUndefined:!0,arrayAccsessor:"[]",objectAccsessor:"."},r.toQueriesAccsessors={".":[".",""],"[]":["[","]"],"{}":["{","}"]},(r=(r=e.Array||(e.Array={})).Sort||(r.Sort={})).defaultOrders=["ASC","DESC","default"],r.defaultOrder="default",r.compareStrings=function(e,r,o,s,t){return r&&o?e?t.localeCompare(s):s.localeCompare(t):e&&r?1:-1},r.compareNumbers=function(e,r,o,s,t){return r&&o?e?t<s?1:-1:s<t?1:-1:r||o?e&&r?1:-1:void 0},r.compareBooleans=function(e,r,o,s,t){return r&&o?e?t<s?1:-1:s<t?1:-1:r||o?e&&r?1:-1:void 0}}(Types=exports.Types||(exports.Types={}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
