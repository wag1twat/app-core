{"version":3,"sources":["Base/Types.js","../lib/Base/Types.ts"],"names":["Types","Object","defineProperty","exports","value","defaultToQueriesOptions","skipNull","skipUndefined","arrayAccsessor","objectAccsessor","toQueriesAccsessors",".","[]","{}"],"mappings":"AAAA,aCAA,IAAiBA,MDCjBC,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,MAAAA,KAAAA,ECDP,SAAiBF,IAsBIC,EAAAD,EAAAC,SAAAD,EAAAC,OAAM,KAONI,wBAA4C,CACrDC,SAAU,CAAA,EACVC,cAAe,CAAA,EACfC,eAAgB,KAChBC,gBAAiB,GAFjBF,EAISN,EAAAS,oBAAsB,CAC/BC,IAAK,CAAC,IAAK,IACXC,KAAM,CAAC,IAAK,KACZC,KAAM,CAAC,IAAK,IAFZ,CAKX,EAzCgBb,MAAAG,QAAAH,QAAAG,QAAAH,MAAK,GAAA","file":"Types.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Types = void 0;\nvar Types;\n(function (Types) {\n    let Object;\n    (function (Object) {\n        Object.defaultToQueriesOptions = {\n            skipNull: true,\n            skipUndefined: true,\n            arrayAccsessor: '[]',\n            objectAccsessor: '.'\n        };\n        Object.toQueriesAccsessors = {\n            '.': ['.', ''],\n            '[]': ['[', ']'],\n            '{}': ['{', '}'],\n        };\n    })(Object = Types.Object || (Types.Object = {}));\n})(Types = exports.Types || (exports.Types = {}));\n","export namespace Types {\r\n    export namespace Utility {\r\n        export type StringOrNumber = string | number\r\n    }\r\n    export namespace String {\r\n        export type Split<S extends string, D extends string> = \r\n            string extends S \r\n            ? string[] \r\n            : S extends '' ? [] \r\n            : S extends `${infer T}${D}${infer U}` \r\n            ? [T, ...Split<U, D>] \r\n            : [S];\r\n\r\n        export type ReplaceAll<T extends string, M extends { [k: string]: string },\r\n            A extends string = \"\"> =\r\n            T extends `${Extract<keyof M, string>}${infer R}` \r\n            ? (\r\n                T extends `${infer K}${R}` ?\r\n                ReplaceAll<R, M, `${A}${M[Extract<K, keyof M>]}`>\r\n                : never\r\n            ) : T extends `${infer F}${infer R}` ? ReplaceAll<R, M, `${A}${F}`> : A\r\n    }\r\n    export namespace Object {\r\n        export interface ToQueriesOptions {\r\n            objectAccsessor: '.' | '{}' | '[]',\r\n            arrayAccsessor: '.' | '{}' | '[]',\r\n            skipUndefined: boolean\r\n            skipNull: boolean\r\n        }\r\n        export const defaultToQueriesOptions: ToQueriesOptions = {\r\n            skipNull: true,\r\n            skipUndefined: true,\r\n            arrayAccsessor: '[]',\r\n            objectAccsessor: '.'\r\n        }\r\n        export const toQueriesAccsessors = {\r\n            '.': ['.', ''] as const,\r\n            '[]': ['[', ']'] as const,\r\n            '{}': ['{', '}'] as const,\r\n        }\r\n    }\r\n}"]}