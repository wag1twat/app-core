{"version":3,"sources":["../lib/Base/Types.ts"],"names":["Types","Object","defaultToQueriesOptions","skipNull","skipUndefined","arrayAccsessor","objectAccsessor","toQueriesAccsessors",".","[]","{}","exports"],"mappings":"aAAM,IAAWA,M,4EAAjB,SAAiBA,IAsBIC,EAAAD,EAAAC,SAAAD,EAAAC,OAAM,KAONC,wBAA4C,CACrDC,SAAU,CAAA,EACVC,cAAe,CAAA,EACfC,eAAgB,KAChBC,gBAAiB,GAXRL,EAaAA,EAAAM,oBAAsB,CAC/BC,IAAK,CAAC,IAAK,IACXC,KAAM,CAAC,IAAK,KACZC,KAAM,CAAC,IAAK,IANZL,CASX,GAAAM,QAAAX,MAAAA,SAzCqBW,QAAAX,MAALA,MAAK,GAAA","file":"Types.js","sourcesContent":["export namespace Types {\r\n    export namespace Utility {\r\n        export type StringOrNumber = string | number\r\n    }\r\n    export namespace String {\r\n        export type Split<S extends string, D extends string> = \r\n            string extends S \r\n            ? string[] \r\n            : S extends '' ? [] \r\n            : S extends `${infer T}${D}${infer U}` \r\n            ? [T, ...Split<U, D>] \r\n            : [S];\r\n\r\n        export type ReplaceAll<T extends string, M extends { [k: string]: string },\r\n            A extends string = \"\"> =\r\n            T extends `${Extract<keyof M, string>}${infer R}` \r\n            ? (\r\n                T extends `${infer K}${R}` ?\r\n                ReplaceAll<R, M, `${A}${M[Extract<K, keyof M>]}`>\r\n                : never\r\n            ) : T extends `${infer F}${infer R}` ? ReplaceAll<R, M, `${A}${F}`> : A\r\n    }\r\n    export namespace Object {\r\n        export interface ToQueriesOptions {\r\n            objectAccsessor: '.' | '{}' | '[]',\r\n            arrayAccsessor: '.' | '{}' | '[]',\r\n            skipUndefined: boolean\r\n            skipNull: boolean\r\n        }\r\n        export const defaultToQueriesOptions: ToQueriesOptions = {\r\n            skipNull: true,\r\n            skipUndefined: true,\r\n            arrayAccsessor: '[]',\r\n            objectAccsessor: '.'\r\n        }\r\n        export const toQueriesAccsessors = {\r\n            '.': ['.', ''] as const,\r\n            '[]': ['[', ']'] as const,\r\n            '{}': ['{', '}'] as const,\r\n        }\r\n    }\r\n}"]}