{"version":3,"sources":["hooks/useArrayPaging.js","../src/hooks/useArrayPaging.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","useArrayPaging","react_1","require","Base_1","props","pageSize","paginationSize","onMount","items","itemsRef","default","useRef","state","setState","useState","deepEqual","current","functions","useMemo","$Array","paging","page","onPagingUpdate","nextState","prevState","assign"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAGxDI,QAH6DC,eAAA,KAAA,ECF7D,MAAAC,QAAAP,gBAAAQ,QAAA,OAAA,CAAA,EACAC,OAAAD,QAAA,SAAA,EAYMF,eAAiCI,IACnC,KAAM,CAAEC,SAAAA,EAAUC,eAAAA,EAAgBC,QAAAA,EAAU,CAAA,EAAMC,MAAAA,EAAQ,EAAE,EAAKJ,EAE3DK,EAAWR,QAAAS,QAAMC,OAAYH,CAAK,EAClC,CAACI,EAAOC,GAAYZ,QAAAS,QAAMI,SAAQ,GAEnC,EAAAX,OAAAY,WAAUN,EAASO,QAASR,CAAK,IAClCC,EAASO,QAAUR,GAGjBS,EAAYhB,QAAAS,QAAMQ,QAAQ,KACrB,EAAAf,OAAAgB,QAAOV,EAASO,OAAO,EAAEI,OAAO,CACnCC,KAAW,OAALT,GAAK,KAAA,IAALA,EAAK,KAAA,EAALA,EAAOS,KACbhB,SAAAA,EACAC,eAAAA,EACAC,QAAAA,EACAe,eAAiBC,IACbV,EAAUW,IAAgB,EAAArB,OAAAY,WAAUS,EAAWD,CAAS,EAAgBC,EAAZD,CAAsB,CACtF,CDhBR,CCiBK,EACF,CAAClB,EAAUC,EAAgBG,EAASO,QAAQ,EAE/C,OAAOnB,OAAO4B,OAAOb,GAAU,GAA4CK,CAAS,CACxF,EAGSlB,QAAAC,eAAAA","file":"useArrayPaging.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useArrayPaging = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst Base_1 = require(\"../Base\");\n// TODO: onMount props\nconst useArrayPaging = (props) => {\n    const { pageSize, paginationSize, onMount = true, items = [] } = props;\n    const itemsRef = react_1.default.useRef(items);\n    const [state, setState] = react_1.default.useState();\n    if (!(0, Base_1.deepEqual)(itemsRef.current, items)) {\n        itemsRef.current = items;\n    }\n    const functions = react_1.default.useMemo(() => {\n        return (0, Base_1.$Array)(itemsRef.current).paging({\n            page: state?.page,\n            pageSize,\n            paginationSize,\n            onMount,\n            onPagingUpdate: (nextState) => {\n                setState((prevState) => (!(0, Base_1.deepEqual)(prevState, nextState) ? nextState : prevState));\n            },\n        });\n    }, [pageSize, paginationSize, itemsRef.current]);\n    return Object.assign(state || {}, functions);\n};\nexports.useArrayPaging = useArrayPaging;\n","import React from 'react'\nimport { deepEqual, $Array, Types } from '../Base'\n\ninterface ArrayPagingProps<T extends any>\n    extends Pick<Types.Array.Paging.Options, 'page' | 'pageSize' | 'paginationSize' | 'onMount'> {\n    items: T[] | undefined\n}\n\ninterface ArrayPaging<T extends any>\n    extends Types.Array.CreatePaging.State<T[]>,\n        Types.Array.Paging.PagingMethods {}\n\n// TODO: onMount props\nconst useArrayPaging = <T extends any>(props: ArrayPagingProps<T>): ArrayPaging<T> => {\n    const { pageSize, paginationSize, onMount = true, items = [] } = props\n\n    const itemsRef = React.useRef<T[]>(items)\n    const [state, setState] = React.useState<Types.Array.CreatePaging.State<T[]>>()\n\n    if (!deepEqual(itemsRef.current, items)) {\n        itemsRef.current = items\n    }\n\n    const functions = React.useMemo(() => {\n        return $Array(itemsRef.current).paging({\n            page: state?.page,\n            pageSize,\n            paginationSize,\n            onMount,\n            onPagingUpdate: (nextState) => {\n                setState((prevState) => (!deepEqual(prevState, nextState) ? nextState : prevState))\n            },\n        })\n    }, [pageSize, paginationSize, itemsRef.current])\n\n    return Object.assign(state || ({} as Types.Array.CreatePaging.State<T[]>), functions)\n}\n\nexport type { ArrayPagingProps, ArrayPaging }\nexport { useArrayPaging }\n"]}