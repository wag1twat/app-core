{"version":3,"sources":["hooks/useCollectionSort/useCollectionSort.js","../src/hooks/useCollectionSort/useCollectionSort.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","useCollectionSort","react_1","require","Base_1","options","collection","order","orders","field","collectionRef","default","useRef","ordersRef","fieldRef","sortState","onSortUpdate","useState","deepEqual","current","functions","useMemo","update","cleanup","$Array","sort","nextState","prevState"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAGxDI,QAH6DC,kBAAA,KAAA,ECD7D,MAAAC,QAAAP,gBAAAQ,QAAA,OAAA,CAAA,EACAC,OAAAD,QAAA,YAAA,EAGMF,kBACFI,IAEA,KAAM,CAAEC,WAAAA,EAAYC,MAAAA,EAAOC,OAAAA,EAAQC,MAAAA,CAAK,EAAKJ,EAEvCK,EAAgBR,QAAAS,QAAMC,OAAON,CAAU,EACvCO,EAAYX,QAAAS,QAAMC,OAAOJ,CAAM,EAC/BM,EAAWZ,QAAAS,QAAMC,OAAOH,CAAK,EAE7B,CAACM,EAAWC,GAAgBd,QAAAS,QAAMM,SAAuC,EAAE,GAE5E,EAAAb,OAAAc,WAAUR,EAAcS,QAASb,CAAU,IAC5CI,EAAcS,QAAUb,IAEvB,EAAAF,OAAAc,WAAUL,EAAUM,QAASX,CAAM,IACpCK,EAAUM,QAAUX,IAEnB,EAAAJ,OAAAc,WAAUJ,EAASK,QAASV,CAAK,IAClCK,EAASK,QAAUV,GAGjBW,EAAYlB,QAAAS,QAAMU,QAAQ,KAC5B,GAAM,CAAEC,OAAAA,EAAQC,QAAAA,CAAO,GAAK,EAAAnB,OAAAoB,QAAOd,EAAcS,OAAO,EAAEM,KAAK,CAC3DlB,MAAAA,EACAC,OAAQK,EAAUM,QAClBV,MAAOK,EAASK,QAChBH,aAAeU,GACXV,EAAcW,IACT,EAAAvB,OAAAc,WAAUS,EAAWD,CAAS,EAAqCC,EAAjC,CAAE,GAAGA,EAAW,GAAGD,CAAS,CAAc,CDd7F,CCgBK,EACD,MAAO,CAAEJ,OAAAA,EAAQC,QAAAA,CAAO,CAC5B,EAAG,CAACb,EAAcS,QAASN,EAAUM,QAASL,EAASK,QAASZ,EAAM,EAEtE,MAAO,CACH,GAAGQ,EACH,GAAGK,CDNP,CCQJ,EAESpB,QAAAC,kBAAAA","file":"useCollectionSort.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useCollectionSort = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst Base_1 = require(\"../../Base\");\nconst useCollectionSort = (options) => {\n    const { collection, order, orders, field } = options;\n    const collectionRef = react_1.default.useRef(collection);\n    const ordersRef = react_1.default.useRef(orders);\n    const fieldRef = react_1.default.useRef(field);\n    const [sortState, onSortUpdate] = react_1.default.useState({});\n    if (!(0, Base_1.deepEqual)(collectionRef.current, collection)) {\n        collectionRef.current = collection;\n    }\n    if (!(0, Base_1.deepEqual)(ordersRef.current, orders)) {\n        ordersRef.current = orders;\n    }\n    if (!(0, Base_1.deepEqual)(fieldRef.current, field)) {\n        fieldRef.current = field;\n    }\n    const functions = react_1.default.useMemo(() => {\n        const { update, cleanup } = (0, Base_1.$Array)(collectionRef.current).sort({\n            order,\n            orders: ordersRef.current,\n            field: fieldRef.current,\n            onSortUpdate: (nextState) => onSortUpdate((prevState) => !(0, Base_1.deepEqual)(prevState, nextState) ? { ...prevState, ...nextState } : prevState),\n        });\n        return { update, cleanup };\n    }, [collectionRef.current, ordersRef.current, fieldRef.current, order]);\n    return {\n        ...sortState,\n        ...functions,\n    };\n};\nexports.useCollectionSort = useCollectionSort;\n","import { SortState } from '../../Base/Array/CollectionSort'\nimport React from 'react'\nimport { $Array, ArrayOf, deepEqual, Path } from '../../Base'\nimport { CollectionSortProps, CollectionSortResult } from './types'\n\nconst useCollectionSort = <T extends any[], XPath extends Path<ArrayOf<T>>>(\n    options: CollectionSortProps<T, XPath>\n): CollectionSortResult<T, XPath> => {\n    const { collection, order, orders, field } = options\n\n    const collectionRef = React.useRef(collection)\n    const ordersRef = React.useRef(orders)\n    const fieldRef = React.useRef(field)\n\n    const [sortState, onSortUpdate] = React.useState<Partial<SortState<T, XPath>>>({})\n\n    if (!deepEqual(collectionRef.current, collection)) {\n        collectionRef.current = collection\n    }\n    if (!deepEqual(ordersRef.current, orders)) {\n        ordersRef.current = orders\n    }\n    if (!deepEqual(fieldRef.current, field)) {\n        fieldRef.current = field\n    }\n\n    const functions = React.useMemo(() => {\n        const { update, cleanup } = $Array(collectionRef.current).sort({\n            order,\n            orders: ordersRef.current,\n            field: fieldRef.current,\n            onSortUpdate: (nextState) =>\n                onSortUpdate((prevState) =>\n                    !deepEqual(prevState, nextState) ? { ...prevState, ...nextState } : prevState\n                ),\n        })\n        return { update, cleanup }\n    }, [collectionRef.current, ordersRef.current, fieldRef.current, order])\n\n    return {\n        ...sortState,\n        ...functions,\n    }\n}\n\nexport { useCollectionSort }\n"]}