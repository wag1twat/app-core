{"version":3,"sources":["hooks/useCollectionPaging/useCollectionPaging.js","../src/hooks/useCollectionPaging/useCollectionPaging.ts"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","useCollectionPaging","react_1","require","Base_1","options","startsWith","pageSize","paginationSize","onMount","collectionRef","default","useRef","collection","pagingState","onPagingUpdate","useState","page","onCollectionUpdate","deepEqual","current","useMemo","nextPage","nextPagingPage","prevPage","prevPagingPage","updatePage","$Array","paging","nextState","prevState","nextCollection","prevCollection"],"mappings":"AAAA,aACA,IAAIA,gBAAoD,SAAUC,GAA9DD,OAAAA,GAAeC,EAAIC,WAAQD,EAAKD,CAAAA,QAAeC,CAAK,CAExD,EACAE,OAF6CC,eAAWH,QAAAA,aAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAGxDI,QAH6DC,oBAAA,KAAA,ECD7D,MAAAC,QAAAP,gBAAAQ,QAAA,OAAA,CAAA,EACAC,OAAAD,QAAA,YAAA,EAGMF,oBACFI,IAEA,KAAM,CAAEC,WAAAA,EAAYC,SAAAA,EAAUC,eAAAA,EAAgBC,QAAAA,CAAO,EAAKJ,EAEpDK,EAAgBR,QAAAS,QAAMC,OAAUP,EAAQQ,UAAU,EAElD,CAACC,EAAaC,GAAkBb,QAAAS,QAAMK,SAA+B,CACvEC,KAAMX,GAAc,CAR5B,CASK,EAEK,CAACO,EAAYK,GAAsBhB,QAAAS,QAAMK,SAAQ,EA2BvD,OAzBK,EAAAZ,OAAAe,WAAUT,EAAcU,QAASf,EAAQQ,UAAU,IACpDH,EAAcU,QAAUf,EAAQQ,YAwB7B,CACH,GAtBcX,QAAAS,QAAMU,QAAQ,KAC5B,GAAM,CAAEC,SAAAA,EAAUC,eAAAA,EAAgBC,SAAAA,EAAUC,eAAAA,EAAgBC,WAAAA,CAAU,GAAK,EAAAtB,OAAAuB,QACvEjB,EAAcU,OAAO,EACvBQ,OAAO,CACLtB,WAAuB,OAAXQ,GAAW,KAAA,IAAXA,EAAW,KAAA,EAAXA,EAAaG,KACzBV,SAAAA,EACAC,eAAAA,EACAC,QAAAA,EACAM,eAAiBc,GACbd,EAAgBe,IACX,EAAA1B,OAAAe,WAAUW,EAAWD,CAAS,EAAqCC,EAAjC,CAAE,GAAGA,EAAW,GAAGD,CAAS,CAAc,EAErFX,mBAAqBa,GACjBb,EAAoBc,IACf,EAAA5B,OAAAe,WAAUa,EAAgBD,CAAc,EAAqBC,EAAjBD,CAA+B,CAjBxFrB,CAmBC,EAED,MAAO,CAAEY,SAAAA,EAAUC,eAAAA,EAAgBC,SAAAA,EAAUC,eAAAA,EAAgBC,WAAAA,CAAU,CAC3E,EAAG,CAAChB,EAAcU,QAAoB,OAAXN,GAAW,KAAA,IAAXA,EAAW,KAAA,EAAXA,EAAaG,KAAMV,EAAUC,EAAgBC,EAAQ,EAI5E,GAAGK,EACHD,WAAAA,CDbJ,CCeJ,EAESb,QAAAC,oBAAAA","file":"useCollectionPaging.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useCollectionPaging = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst Base_1 = require(\"../../Base\");\nconst useCollectionPaging = (options) => {\n    const { startsWith, pageSize, paginationSize, onMount } = options;\n    const collectionRef = react_1.default.useRef(options.collection);\n    const [pagingState, onPagingUpdate] = react_1.default.useState({\n        page: startsWith || 1,\n    });\n    const [collection, onCollectionUpdate] = react_1.default.useState();\n    if (!(0, Base_1.deepEqual)(collectionRef.current, options.collection)) {\n        collectionRef.current = options.collection;\n    }\n    const functions = react_1.default.useMemo(() => {\n        const { nextPage, nextPagingPage, prevPage, prevPagingPage, updatePage } = (0, Base_1.$Array)(collectionRef.current).paging({\n            startsWith: pagingState?.page,\n            pageSize,\n            paginationSize,\n            onMount,\n            onPagingUpdate: (nextState) => onPagingUpdate((prevState) => !(0, Base_1.deepEqual)(prevState, nextState) ? { ...prevState, ...nextState } : prevState),\n            onCollectionUpdate: (nextCollection) => onCollectionUpdate((prevCollection) => !(0, Base_1.deepEqual)(prevCollection, nextCollection) ? nextCollection : prevCollection),\n        });\n        return { nextPage, nextPagingPage, prevPage, prevPagingPage, updatePage };\n    }, [collectionRef.current, pagingState?.page, pageSize, paginationSize, onMount]);\n    return {\n        ...functions,\n        ...pagingState,\n        collection,\n    };\n};\nexports.useCollectionPaging = useCollectionPaging;\n","import { PagingState } from '../../Base/Array'\nimport React from 'react'\nimport { deepEqual, $Array } from '../../Base'\nimport { CollectionPagingResult, CollectionPagingProps } from './types'\n\nconst useCollectionPaging = <T extends unknown[]>(\n    options: CollectionPagingProps<T>\n): CollectionPagingResult<T> => {\n    const { startsWith, pageSize, paginationSize, onMount } = options\n\n    const collectionRef = React.useRef<T>(options.collection)\n\n    const [pagingState, onPagingUpdate] = React.useState<Partial<PagingState>>({\n        page: startsWith || 1,\n    })\n\n    const [collection, onCollectionUpdate] = React.useState<T>()\n\n    if (!deepEqual(collectionRef.current, options.collection)) {\n        collectionRef.current = options.collection\n    }\n\n    const functions = React.useMemo(() => {\n        const { nextPage, nextPagingPage, prevPage, prevPagingPage, updatePage } = $Array(\n            collectionRef.current\n        ).paging({\n            startsWith: pagingState?.page,\n            pageSize,\n            paginationSize,\n            onMount,\n            onPagingUpdate: (nextState) =>\n                onPagingUpdate((prevState) =>\n                    !deepEqual(prevState, nextState) ? { ...prevState, ...nextState } : prevState\n                ),\n            onCollectionUpdate: (nextCollection) =>\n                onCollectionUpdate((prevCollection) =>\n                    !deepEqual(prevCollection, nextCollection) ? nextCollection : prevCollection\n                ),\n        })\n\n        return { nextPage, nextPagingPage, prevPage, prevPagingPage, updatePage }\n    }, [collectionRef.current, pagingState?.page, pageSize, paginationSize, onMount])\n\n    return {\n        ...functions,\n        ...pagingState,\n        collection,\n    }\n}\n\nexport { useCollectionPaging }\n"]}