{"version":3,"sources":["EventHandling/EventHandling.js","../src/EventHandling/EventHandling.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","EventHandling","toScrollBottom","ref","options","current","Guards","isFunc","scrollTo","isNumber","scrollHeight","left","top","behavior","onScrollBottom","callback","enabled","event","isScrollHeight","isScrollTop","isClientHeight","currentTarget","scrollTop","clientHeight"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,cAAeC,KAAAA,ECDtB,MAAAE,SAAAC,QAAA,WAAA,QAGMC,cACFC,sBAAwBA,CACpBC,EACAC,KAEID,EAAIE,SACAN,SAAAO,OAAOC,OAAOJ,EAAIE,QAAQG,QAAQ,GAAKT,SAAAO,OAAOG,SAASN,EAAIE,QAAQK,YAAY,GAC/EP,EAAIE,QAAQG,SAAS,CACjBG,KAAM,EACNC,IAAKT,EAAIE,QAAQK,aACjBG,SAAU,SACV,GAAGT,CAFED,CAGR,CAGb,EAEAW,sBAAwBA,CACpBC,EACAC,IAEQC,IACJ,IAEYC,EACAC,EACAC,EAJRJ,GACIC,EAAMI,gBACFH,EAAiBnB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcX,YAAY,EACjES,EAAcpB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcC,SAAS,EAC3DF,EAAiBrB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcE,YAAY,EACjEL,IAAkBC,GAAeC,GAE7BH,EAAMI,cAAcX,aAAeO,EAAMI,cAAcC,YACvDL,EAAMI,cAAcE,cAGpBR,EAASE,CAAK,CAKlC,CDNR,CCUSpB,QAAAI,cAAAA","file":"EventHandling.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventHandling = void 0;\nconst Guards_1 = require(\"../Guards\");\nclass EventHandling {\n    static toScrollBottom = (ref, options) => {\n        if (ref.current) {\n            if (Guards_1.Guards.isFunc(ref.current.scrollTo) && Guards_1.Guards.isNumber(ref.current.scrollHeight)) {\n                ref.current.scrollTo({\n                    left: 0,\n                    top: ref.current.scrollHeight,\n                    behavior: 'smooth',\n                    ...options,\n                });\n            }\n        }\n    };\n    static onScrollBottom = (callback, enabled) => {\n        return (event) => {\n            if (enabled) {\n                if (event.currentTarget) {\n                    let isScrollHeight = Guards_1.Guards.isNumber(event.currentTarget.scrollHeight);\n                    let isScrollTop = Guards_1.Guards.isNumber(event.currentTarget.scrollTop);\n                    let isClientHeight = Guards_1.Guards.isNumber(event.currentTarget.clientHeight);\n                    if (isScrollHeight && isScrollTop && isClientHeight) {\n                        const bottom = event.currentTarget.scrollHeight - event.currentTarget.scrollTop ===\n                            event.currentTarget.clientHeight;\n                        if (bottom) {\n                            callback(event);\n                        }\n                    }\n                }\n            }\n        };\n    };\n}\nexports.EventHandling = EventHandling;\n","import { Guards } from '../Guards'\nimport { MutableRefObject, UIEvent as ReactUIEvent, UIEventHandler } from 'react'\n\nclass EventHandling {\n    static toScrollBottom = <E extends Element>(\n        ref: MutableRefObject<E | null>,\n        options?: ScrollToOptions\n    ) => {\n        if (ref.current) {\n            if (Guards.isFunc(ref.current.scrollTo) && Guards.isNumber(ref.current.scrollHeight)) {\n                ref.current.scrollTo({\n                    left: 0,\n                    top: ref.current.scrollHeight,\n                    behavior: 'smooth',\n                    ...options,\n                })\n            }\n        }\n    }\n\n    static onScrollBottom = <El extends Element>(\n        callback: (e: ReactUIEvent<El, UIEvent>) => void,\n        enabled: boolean\n    ): UIEventHandler<El> => {\n        return (event) => {\n            if (enabled) {\n                if (event.currentTarget) {\n                    let isScrollHeight = Guards.isNumber(event.currentTarget.scrollHeight)\n                    let isScrollTop = Guards.isNumber(event.currentTarget.scrollTop)\n                    let isClientHeight = Guards.isNumber(event.currentTarget.clientHeight)\n                    if (isScrollHeight && isScrollTop && isClientHeight) {\n                        const bottom =\n                            event.currentTarget.scrollHeight - event.currentTarget.scrollTop ===\n                            event.currentTarget.clientHeight\n\n                        if (bottom) {\n                            callback(event)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport { EventHandling }\n"]}