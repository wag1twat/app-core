{"version":3,"sources":["EventHandling/EventHandling.js","../lib/EventHandling/EventHandling.ts"],"names":["Object","defineProperty","exports","value","Guards_1","require","EventHandling","scrollBottomRef","ref","options","current","Guards","isTypeofFn","scrollTo","isNumber","scrollHeight","left","top","behavior","ifScrollBottom","callback","enabled","event","isScrollHeight","isScrollTop","isClientHeight","currentTarget","scrollTop","clientHeight"],"mappings":"AAAA,aACAA,OAAOC,eAAeC,QAAS,aAAc,CAAEC,MAAO,CAAA,CAAK,CAAC,EAA5DH,QAAOC,cAAeC,KAAAA,ECDtB,MAAAE,SAAAC,QAAA,WAAA,QAGMC,cACFC,uBAAyBA,CAAoBC,EAAiCC,KACvED,EAAIE,SACAN,SAAAO,OAAOC,WAAWJ,EAAIE,QAAQG,QAAQ,GAAKT,SAAAO,OAAOG,SAASN,EAAIE,QAAQK,YAAY,GAClFP,EAAIE,QAAQG,SAAS,CACjBG,KAAM,EACNC,IAAKT,EAAIE,QAAQK,aACjBG,SAAU,SACV,GAAGT,CAFED,CAGR,CAGb,EAEAW,sBAAwBA,CAAqBC,EAAkDC,IACnFC,IACJ,IAEYC,EACAC,EACAC,EAJTJ,GACIC,EAAMI,gBACDH,EAAkBnB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcX,YAAY,EAClES,EAAepB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcC,SAAS,EAC5DF,EAAkBrB,SAAAO,OAAOG,SAASQ,EAAMI,cAAcE,YAAY,EACnEL,IAAkBC,GAAeC,GACjBH,EAAMI,cAAcX,aAAeO,EAAMI,cAAcC,YAAcL,EAAMI,cAAcE,cAGpGR,EAASE,CAAK,CAKlC,CDCR,CCGSpB,QAAAI,cAAAA","file":"EventHandling.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventHandling = void 0;\nconst Guards_1 = require(\"../Guards\");\nclass EventHandling {\n    static scrollBottomRef = (ref, options) => {\n        if (ref.current) {\n            if (Guards_1.Guards.isTypeofFn(ref.current.scrollTo) && Guards_1.Guards.isNumber(ref.current.scrollHeight)) {\n                ref.current.scrollTo({\n                    left: 0,\n                    top: ref.current.scrollHeight,\n                    behavior: \"smooth\",\n                    ...options\n                });\n            }\n        }\n    };\n    static ifScrollBottom = (callback, enabled) => {\n        return (event) => {\n            if (enabled) {\n                if (event.currentTarget) {\n                    let isScrollHeight = Guards_1.Guards.isNumber(event.currentTarget.scrollHeight);\n                    let isScrollTop = Guards_1.Guards.isNumber(event.currentTarget.scrollTop);\n                    let isClientHeight = Guards_1.Guards.isNumber(event.currentTarget.clientHeight);\n                    if (isScrollHeight && isScrollTop && isClientHeight) {\n                        const bottom = event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight;\n                        if (bottom) {\n                            callback(event);\n                        }\n                    }\n                }\n            }\n        };\n    };\n}\nexports.EventHandling = EventHandling;\n","import { Guards } from \"../Guards\";\r\nimport { MutableRefObject, UIEvent as ReactUIEvent, UIEventHandler } from \"react\";\r\n\r\nclass EventHandling {\r\n    static scrollBottomRef = <E extends Element>(ref: MutableRefObject<E | null>, options?: ScrollToOptions) => {\r\n        if(ref.current) {\r\n            if(Guards.isTypeofFn(ref.current.scrollTo) && Guards.isNumber(ref.current.scrollHeight)) {\r\n                ref.current.scrollTo({\r\n                    left: 0,\r\n                    top: ref.current.scrollHeight,\r\n                    behavior: \"smooth\",\r\n                    ...options\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    static ifScrollBottom = <El extends Element>(callback: (e: ReactUIEvent<El, UIEvent>) => void, enabled: boolean): UIEventHandler<El> => {\r\n        return (event) => {\r\n            if(enabled) {\r\n                if(event.currentTarget) {\r\n                    let isScrollHeight =  Guards.isNumber(event.currentTarget.scrollHeight)\r\n                    let isScrollTop =  Guards.isNumber(event.currentTarget.scrollTop)\r\n                    let isClientHeight =  Guards.isNumber(event.currentTarget.clientHeight)\r\n                    if(isScrollHeight && isScrollTop && isClientHeight) {\r\n                        const bottom = event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight;\r\n\r\n                        if(bottom) {\r\n                            callback(event)\r\n                        }\r\n                    }\r\n                }                \r\n            }         \r\n        }\r\n    }\r\n}\r\n\r\nexport { EventHandling }"]}