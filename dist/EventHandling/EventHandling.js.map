{"version":3,"sources":["../lib/EventHandling/EventHandling.ts","EventHandling/EventHandling.js"],"names":["_Guards","require","EventHandling","exports","scrollBottomRef","ref","options","current","Guards","isTypeofFn","scrollTo","isNumber","scrollHeight","Object","assign","left","top","behavior","ifScrollBottom","callback","enabled","event","isScrollHeight","isScrollTop","isClientHeight","currentTarget","scrollTop","clientHeight"],"mappings":"iGAAA,IAAAA,QAAAC,QAAA,WAAA,QAGMC,gBCDLC,QAAAD,cAAAA,eDEUE,gBAAkB,CAAwBC,EAAiCC,KAC3ED,EAAIE,SACAC,QAAAA,OAAOC,WAAWJ,EAAIE,QAAQG,QAAQ,GAAKF,QAAAA,OAAOG,SAASN,EAAIE,QAAQK,YAAY,GAClFP,EAAIE,QAAQG,SAAQG,OAAAC,OAAA,CAChBC,KAAM,EACNC,IAAKX,EAAIE,QAAQK,aACjBK,SAAU,QAAQ,EACfX,CAAO,CAAA,CAI1B,EAEOJ,cAAAgB,eAAgB,CAACC,EAAuEC,IAC5DC,IAC3B,IAEYC,EACAC,EACAC,EAJTJ,GACIC,EAAMI,gBACDH,EAAkBd,QAAAA,OAAOG,SAASU,EAAMI,cAAcb,YAAY,EAClEW,EAAef,QAAAA,OAAOG,SAASU,EAAMI,cAAcC,SAAS,EAC5DF,EAAkBhB,QAAAA,OAAOG,SAASU,EAAMI,cAAcE,YAAY,EACnEL,IAAkBC,GAAeC,GACjBH,EAAMI,cAAcb,aAAeS,EAAMI,cAAcC,YAAcL,EAAMI,cAAcE,cAGpGR,EAASE,CAAK,CAKlC","file":"EventHandling.js","sourcesContent":["import { Guards } from \"../Guards\";\r\nimport { MutableRefObject, UIEvent } from \"react\";\r\n\r\nclass EventHandling {\r\n    static scrollBottomRef = <E extends HTMLElement>(ref: MutableRefObject<E | null>, options?: ScrollToOptions) => {\r\n        if(ref.current) {\r\n            if(Guards.isTypeofFn(ref.current.scrollTo) && Guards.isNumber(ref.current.scrollHeight)) {\r\n                ref.current.scrollTo({\r\n                    left: 0,\r\n                    top: ref.current.scrollHeight,\r\n                    behavior: \"smooth\",\r\n                    ...options\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    static ifScrollBottom =(callback: <E extends HTMLElement>(event: UIEvent<E, UIEvent>) => void, enabled: boolean) => {\r\n        return <E extends HTMLElement>(event: UIEvent<E, UIEvent>) => {\r\n            if(enabled) {\r\n                if(event.currentTarget) {\r\n                    let isScrollHeight =  Guards.isNumber(event.currentTarget.scrollHeight)\r\n                    let isScrollTop =  Guards.isNumber(event.currentTarget.scrollTop)\r\n                    let isClientHeight =  Guards.isNumber(event.currentTarget.clientHeight)\r\n                    if(isScrollHeight && isScrollTop && isClientHeight) {\r\n                        const bottom = event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight;\r\n\r\n                        if(bottom) {\r\n                            callback(event)\r\n                        }\r\n                    }\r\n                }                \r\n            }         \r\n        }\r\n    }\r\n}\r\n\r\nexport { EventHandling }","import { Guards } from \"../Guards\";\nclass EventHandling {\n}\nEventHandling.scrollBottomRef = (ref, options) => {\n    if (ref.current) {\n        if (Guards.isTypeofFn(ref.current.scrollTo) && Guards.isNumber(ref.current.scrollHeight)) {\n            ref.current.scrollTo(Object.assign({ left: 0, top: ref.current.scrollHeight, behavior: \"smooth\" }, options));\n        }\n    }\n};\nEventHandling.ifScrollBottom = (callback, enabled) => {\n    return (event) => {\n        if (enabled) {\n            if (event.currentTarget) {\n                let isScrollHeight = Guards.isNumber(event.currentTarget.scrollHeight);\n                let isScrollTop = Guards.isNumber(event.currentTarget.scrollTop);\n                let isClientHeight = Guards.isNumber(event.currentTarget.clientHeight);\n                if (isScrollHeight && isScrollTop && isClientHeight) {\n                    const bottom = event.currentTarget.scrollHeight - event.currentTarget.scrollTop === event.currentTarget.clientHeight;\n                    if (bottom) {\n                        callback(event);\n                    }\n                }\n            }\n        }\n    };\n};\nexport { EventHandling };\n"]}