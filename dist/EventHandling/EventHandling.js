"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EventHandling=void 0;const Guards_1=require("../Guards");class EventHandling{static toScrollBottom=(r,e)=>{r.current&&Guards_1.Guards.isTypeofFn(r.current.scrollTo)&&Guards_1.Guards.isNumber(r.current.scrollHeight)&&r.current.scrollTo({left:0,top:r.current.scrollHeight,behavior:"smooth",...e})};static onScrollBottom=(o,u)=>r=>{var e,t,s;u&&r.currentTarget&&(e=Guards_1.Guards.isNumber(r.currentTarget.scrollHeight),t=Guards_1.Guards.isNumber(r.currentTarget.scrollTop),s=Guards_1.Guards.isNumber(r.currentTarget.clientHeight),e)&&t&&s&&r.currentTarget.scrollHeight-r.currentTarget.scrollTop===r.currentTarget.clientHeight&&o(r)}}exports.EventHandling=EventHandling;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50SGFuZGxpbmcvRXZlbnRIYW5kbGluZy5qcyIsIi4uL3NyYy9FdmVudEhhbmRsaW5nL0V2ZW50SGFuZGxpbmcudHMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHdWFyZHNfMSIsInJlcXVpcmUiLCJFdmVudEhhbmRsaW5nIiwidG9TY3JvbGxCb3R0b20iLCJyZWYiLCJvcHRpb25zIiwiY3VycmVudCIsIkd1YXJkcyIsImlzVHlwZW9mRm4iLCJzY3JvbGxUbyIsImlzTnVtYmVyIiwic2Nyb2xsSGVpZ2h0IiwibGVmdCIsInRvcCIsImJlaGF2aW9yIiwib25TY3JvbGxCb3R0b20iLCJjYWxsYmFjayIsImVuYWJsZWQiLCJldmVudCIsImlzU2Nyb2xsSGVpZ2h0IiwiaXNTY3JvbGxUb3AiLCJpc0NsaWVudEhlaWdodCIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxUb3AiLCJjbGllbnRIZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFBLGFBQ0FBLE9BQU9DLGVBQWVDLFFBQVMsYUFBYyxDQUFFQyxNQUFPLENBQUEsQ0FBSyxDQUFDLEVBQTVESCxRQUFPQyxjQUFlQyxLQUFBQSxFQ0R0QixNQUFBRSxTQUFBQyxRQUFBLFdBQUEsUUFPTUMsY0FDRkMsc0JBQXdCQSxDQUNwQkMsRUFDQUMsS0FFSUQsRUFBSUUsU0FFQU4sU0FBQU8sT0FBT0MsV0FBV0osRUFBSUUsUUFBUUcsUUFBUSxHQUN0Q1QsU0FBQU8sT0FBT0csU0FBU04sRUFBSUUsUUFBUUssWUFBWSxHQUV4Q1AsRUFBSUUsUUFBUUcsU0FBUyxDQUNqQkcsS0FBTSxFQUNOQyxJQUFLVCxFQUFJRSxRQUFRSyxhQUNqQkcsU0FBVSxTQUNWLEdBQUdULENBREhTLENBRUgsQ0FHYixFQUVBQyxzQkFBd0JBLENBQ3BCQyxFQUNBQyxJQUVRQyxJQUNKLElBRVlDLEVBR0FDLEVBR0FDLEVBUlJKLEdBQ0lDLEVBQU1JLGdCQUNGSCxFQUFpQm5CLFNBQUFPLE9BQU9HLFNBQ3hCUSxFQUFNSSxjQUFjWCxZQUFZLEVBRWhDUyxFQUFjcEIsU0FBQU8sT0FBT0csU0FDckJRLEVBQU1JLGNBQWNDLFNBQVMsRUFFN0JGLEVBQWlCckIsU0FBQU8sT0FBT0csU0FDeEJRLEVBQU1JLGNBQWNFLFlBQVksRUFFaENMLElBQWtCQyxHQUFlQyxHQUU3QkgsRUFBTUksY0FBY1gsYUFDaEJPLEVBQU1JLGNBQWNDLFlBQ3hCTCxFQUFNSSxjQUFjRSxjQUdwQlIsRUFBU0UsQ0FBSyxDQUtsQyxDRGxCUixDQ3NCU3BCLFFBQUFJLGNBQUFBIiwiZmlsZSI6IkV2ZW50SGFuZGxpbmcvRXZlbnRIYW5kbGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FdmVudEhhbmRsaW5nID0gdm9pZCAwO1xuY29uc3QgR3VhcmRzXzEgPSByZXF1aXJlKFwiLi4vR3VhcmRzXCIpO1xuY2xhc3MgRXZlbnRIYW5kbGluZyB7XG4gICAgc3RhdGljIHRvU2Nyb2xsQm90dG9tID0gKHJlZiwgb3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAocmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChHdWFyZHNfMS5HdWFyZHMuaXNUeXBlb2ZGbihyZWYuY3VycmVudC5zY3JvbGxUbykgJiZcbiAgICAgICAgICAgICAgICBHdWFyZHNfMS5HdWFyZHMuaXNOdW1iZXIocmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHJlZi5jdXJyZW50LnNjcm9sbFRvKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByZWYuY3VycmVudC5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgc3RhdGljIG9uU2Nyb2xsQm90dG9tID0gKGNhbGxiYWNrLCBlbmFibGVkKSA9PiB7XG4gICAgICAgIHJldHVybiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzU2Nyb2xsSGVpZ2h0ID0gR3VhcmRzXzEuR3VhcmRzLmlzTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzU2Nyb2xsVG9wID0gR3VhcmRzXzEuR3VhcmRzLmlzTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzQ2xpZW50SGVpZ2h0ID0gR3VhcmRzXzEuR3VhcmRzLmlzTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsSGVpZ2h0ICYmIGlzU2Nyb2xsVG9wICYmIGlzQ2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib3R0b20gPSBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxUb3AgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG59XG5leHBvcnRzLkV2ZW50SGFuZGxpbmcgPSBFdmVudEhhbmRsaW5nO1xuIiwiaW1wb3J0IHsgR3VhcmRzIH0gZnJvbSAnLi4vR3VhcmRzJ1xuaW1wb3J0IHtcbiAgICBNdXRhYmxlUmVmT2JqZWN0LFxuICAgIFVJRXZlbnQgYXMgUmVhY3RVSUV2ZW50LFxuICAgIFVJRXZlbnRIYW5kbGVyLFxufSBmcm9tICdyZWFjdCdcblxuY2xhc3MgRXZlbnRIYW5kbGluZyB7XG4gICAgc3RhdGljIHRvU2Nyb2xsQm90dG9tID0gPEUgZXh0ZW5kcyBFbGVtZW50PihcbiAgICAgICAgcmVmOiBNdXRhYmxlUmVmT2JqZWN0PEUgfCBudWxsPixcbiAgICAgICAgb3B0aW9ucz86IFNjcm9sbFRvT3B0aW9uc1xuICAgICkgPT4ge1xuICAgICAgICBpZiAocmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBHdWFyZHMuaXNUeXBlb2ZGbihyZWYuY3VycmVudC5zY3JvbGxUbykgJiZcbiAgICAgICAgICAgICAgICBHdWFyZHMuaXNOdW1iZXIocmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgb25TY3JvbGxCb3R0b20gPSA8RWwgZXh0ZW5kcyBFbGVtZW50PihcbiAgICAgICAgY2FsbGJhY2s6IChlOiBSZWFjdFVJRXZlbnQ8RWwsIFVJRXZlbnQ+KSA9PiB2b2lkLFxuICAgICAgICBlbmFibGVkOiBib29sZWFuXG4gICAgKTogVUlFdmVudEhhbmRsZXI8RWw+ID0+IHtcbiAgICAgICAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTY3JvbGxIZWlnaHQgPSBHdWFyZHMuaXNOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1Njcm9sbFRvcCA9IEd1YXJkcy5pc051bWJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzQ2xpZW50SGVpZ2h0ID0gR3VhcmRzLmlzTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTY3JvbGxIZWlnaHQgJiYgaXNTY3JvbGxUb3AgJiYgaXNDbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxIZWlnaHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbFRvcCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsaWVudEhlaWdodFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IEV2ZW50SGFuZGxpbmcgfVxuIl19
