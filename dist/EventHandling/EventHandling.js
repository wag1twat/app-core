"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EventHandling=void 0;const Guards_1=require("../Guards");class EventHandling{static scrollBottomRef=(r,e)=>{r.current&&Guards_1.Guards.isTypeofFn(r.current.scrollTo)&&Guards_1.Guards.isNumber(r.current.scrollHeight)&&r.current.scrollTo({left:0,top:r.current.scrollHeight,behavior:"smooth",...e})};static ifScrollBottom=(u,c)=>r=>{var e,t,s;c&&r.currentTarget&&(e=Guards_1.Guards.isNumber(r.currentTarget.scrollHeight),t=Guards_1.Guards.isNumber(r.currentTarget.scrollTop),s=Guards_1.Guards.isNumber(r.currentTarget.clientHeight),e)&&t&&s&&r.currentTarget.scrollHeight-r.currentTarget.scrollTop===r.currentTarget.clientHeight&&u(r)}}exports.EventHandling=EventHandling;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50SGFuZGxpbmcvRXZlbnRIYW5kbGluZy5qcyIsIi4uL3NyYy9FdmVudEhhbmRsaW5nL0V2ZW50SGFuZGxpbmcudHMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHdWFyZHNfMSIsInJlcXVpcmUiLCJFdmVudEhhbmRsaW5nIiwic2Nyb2xsQm90dG9tUmVmIiwicmVmIiwib3B0aW9ucyIsImN1cnJlbnQiLCJHdWFyZHMiLCJpc1R5cGVvZkZuIiwic2Nyb2xsVG8iLCJpc051bWJlciIsInNjcm9sbEhlaWdodCIsImxlZnQiLCJ0b3AiLCJiZWhhdmlvciIsImlmU2Nyb2xsQm90dG9tIiwiY2FsbGJhY2siLCJlbmFibGVkIiwiZXZlbnQiLCJpc1Njcm9sbEhlaWdodCIsImlzU2Nyb2xsVG9wIiwiaXNDbGllbnRIZWlnaHQiLCJjdXJyZW50VGFyZ2V0Iiwic2Nyb2xsVG9wIiwiY2xpZW50SGVpZ2h0Il0sIm1hcHBpbmdzIjoiQUFBQSxhQUNBQSxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsTUFBTyxDQUFBLENBQUssQ0FBQyxFQUE1REgsUUFBT0MsY0FBZUMsS0FBQUEsRUNEdEIsTUFBQUUsU0FBQUMsUUFBQSxXQUFBLFFBT01DLGNBQ0ZDLHVCQUF5QkEsQ0FDckJDLEVBQ0FDLEtBRUlELEVBQUlFLFNBRUFOLFNBQUFPLE9BQU9DLFdBQVdKLEVBQUlFLFFBQVFHLFFBQVEsR0FDdENULFNBQUFPLE9BQU9HLFNBQVNOLEVBQUlFLFFBQVFLLFlBQVksR0FFeENQLEVBQUlFLFFBQVFHLFNBQVMsQ0FDakJHLEtBQU0sRUFDTkMsSUFBS1QsRUFBSUUsUUFBUUssYUFDakJHLFNBQVUsU0FDVixHQUFHVCxDQURIUyxDQUVILENBR2IsRUFFQUMsc0JBQXdCQSxDQUNwQkMsRUFDQUMsSUFFUUMsSUFDSixJQUVZQyxFQUdBQyxFQUdBQyxFQVJSSixHQUNJQyxFQUFNSSxnQkFDRkgsRUFBaUJuQixTQUFBTyxPQUFPRyxTQUN4QlEsRUFBTUksY0FBY1gsWUFBWSxFQUVoQ1MsRUFBY3BCLFNBQUFPLE9BQU9HLFNBQ3JCUSxFQUFNSSxjQUFjQyxTQUFTLEVBRTdCRixFQUFpQnJCLFNBQUFPLE9BQU9HLFNBQ3hCUSxFQUFNSSxjQUFjRSxZQUFZLEVBRWhDTCxJQUFrQkMsR0FBZUMsR0FFN0JILEVBQU1JLGNBQWNYLGFBQ2hCTyxFQUFNSSxjQUFjQyxZQUN4QkwsRUFBTUksY0FBY0UsY0FHcEJSLEVBQVNFLENBQUssQ0FLbEMsQ0RsQlIsQ0NzQlNwQixRQUFBSSxjQUFBQSIsImZpbGUiOiJFdmVudEhhbmRsaW5nL0V2ZW50SGFuZGxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXZlbnRIYW5kbGluZyA9IHZvaWQgMDtcbmNvbnN0IEd1YXJkc18xID0gcmVxdWlyZShcIi4uL0d1YXJkc1wiKTtcbmNsYXNzIEV2ZW50SGFuZGxpbmcge1xuICAgIHN0YXRpYyBzY3JvbGxCb3R0b21SZWYgPSAocmVmLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKEd1YXJkc18xLkd1YXJkcy5pc1R5cGVvZkZuKHJlZi5jdXJyZW50LnNjcm9sbFRvKSAmJlxuICAgICAgICAgICAgICAgIEd1YXJkc18xLkd1YXJkcy5pc051bWJlcihyZWYuY3VycmVudC5zY3JvbGxIZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgaWZTY3JvbGxCb3R0b20gPSAoY2FsbGJhY2ssIGVuYWJsZWQpID0+IHtcbiAgICAgICAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTY3JvbGxIZWlnaHQgPSBHdWFyZHNfMS5HdWFyZHMuaXNOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTY3JvbGxUb3AgPSBHdWFyZHNfMS5HdWFyZHMuaXNOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxUb3ApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNDbGllbnRIZWlnaHQgPSBHdWFyZHNfMS5HdWFyZHMuaXNOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5jbGllbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTY3JvbGxIZWlnaHQgJiYgaXNTY3JvbGxUb3AgJiYgaXNDbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsSGVpZ2h0IC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbFRvcCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydHMuRXZlbnRIYW5kbGluZyA9IEV2ZW50SGFuZGxpbmc7XG4iLCJpbXBvcnQgeyBHdWFyZHMgfSBmcm9tICcuLi9HdWFyZHMnXG5pbXBvcnQge1xuICAgIE11dGFibGVSZWZPYmplY3QsXG4gICAgVUlFdmVudCBhcyBSZWFjdFVJRXZlbnQsXG4gICAgVUlFdmVudEhhbmRsZXIsXG59IGZyb20gJ3JlYWN0J1xuXG5jbGFzcyBFdmVudEhhbmRsaW5nIHtcbiAgICBzdGF0aWMgc2Nyb2xsQm90dG9tUmVmID0gPEUgZXh0ZW5kcyBFbGVtZW50PihcbiAgICAgICAgcmVmOiBNdXRhYmxlUmVmT2JqZWN0PEUgfCBudWxsPixcbiAgICAgICAgb3B0aW9ucz86IFNjcm9sbFRvT3B0aW9uc1xuICAgICkgPT4ge1xuICAgICAgICBpZiAocmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBHdWFyZHMuaXNUeXBlb2ZGbihyZWYuY3VycmVudC5zY3JvbGxUbykgJiZcbiAgICAgICAgICAgICAgICBHdWFyZHMuaXNOdW1iZXIocmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgaWZTY3JvbGxCb3R0b20gPSA8RWwgZXh0ZW5kcyBFbGVtZW50PihcbiAgICAgICAgY2FsbGJhY2s6IChlOiBSZWFjdFVJRXZlbnQ8RWwsIFVJRXZlbnQ+KSA9PiB2b2lkLFxuICAgICAgICBlbmFibGVkOiBib29sZWFuXG4gICAgKTogVUlFdmVudEhhbmRsZXI8RWw+ID0+IHtcbiAgICAgICAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTY3JvbGxIZWlnaHQgPSBHdWFyZHMuaXNOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1Njcm9sbFRvcCA9IEd1YXJkcy5pc051bWJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzQ2xpZW50SGVpZ2h0ID0gR3VhcmRzLmlzTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTY3JvbGxIZWlnaHQgJiYgaXNTY3JvbGxUb3AgJiYgaXNDbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxIZWlnaHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbFRvcCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsaWVudEhlaWdodFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IEV2ZW50SGFuZGxpbmcgfVxuIl19
